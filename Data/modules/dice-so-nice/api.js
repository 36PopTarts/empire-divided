class DiceSystem{constructor(e,t,i=null,s="default",o=null){this._id=e,this._name=t,this._dice=i||new Map,this._mode=s,this._group=o}get id(){return this._id}get name(){return this._name}get dice(){return this._dice}get mode(){return this._mode}get group(){return this._group}getDiceByShapeAndValues(e,t){for(let i of this.dice.values())if(i.shape==e&&i.values.length==t.length)return i;return null}}class DiceSFX{get nameLocalized(){return game.i18n.localize(this._name)}constructor(e,t,i){this.options=foundry.utils.mergeObject({isGlobal:!1,muteSound:!1},i),this.dicemesh=t,this.box=e,this.destroyed=!1,this.enableGC=!1,this.renderReady=!1,this.volume=t.options.secretRoll&&e.muteSoundSecretRolls||this.options.muteSound?0:this.box.volume}static async init(){return!0}async play(){return Promise.resolve()}static async loadAsset(e,t){return new Promise(((i,s)=>{e.load(t,(e=>i(e)),null,s)}))}static getDialogContent(e,t){let i={},s=game.user.isGM?"":'disabled="disabled"';return i.content=`<div class="form-group">\n                                    <label>{{localize "DICESONICE.sfxOptionsIsGlobal"}}</label>\n                                    <div class="form-fields">\n                                        <input type="checkbox" name="sfxLine[{{id}}][options][isGlobal]" data-dtype="Boolean" ${s} {{checked isGlobal}} />\n                                    </div>\n                                </div>\n                                <div class="form-group">\n                                    <label>{{localize "DICESONICE.sfxOptionsMuteSound"}}</label>\n                                    <div class="form-fields">\n                                        <input type="checkbox" name="sfxLine[{{id}}][options][muteSound]" data-dtype="Boolean" ${s} {{checked muteSound}} />\n                                    </div>\n                                </div>`,i.data={isGlobal:!!e.options&&e.options.isGlobal,muteSound:!!e.options&&e.options.muteSound,id:t},i}}export{DiceSFX,DiceSystem};
