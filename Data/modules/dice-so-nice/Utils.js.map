{"version":3,"file":"Utils.js","sources":["../module/Utils.js"],"sourcesContent":["import { TEXTURELIST, COLORSETS } from './DiceColors.js';\n/**\n * Generic utilities class...\n */\n export class Utils {\n\n    /**\n     * Migrate old 1.0 or 2.0 setting to new 4.0 format.\n     */\n    static async migrateOldSettings() {\n\n        //migrate settings to flags. This is a scoped migration, no GM needed\n        let userSettings = game.settings.get(\"dice-so-nice\", \"settings\");\n        if(userSettings.hasOwnProperty(\"enabled\")){\n            await game.user.setFlag(\"dice-so-nice\", \"settings\", userSettings);\n            await game.settings.set(\"dice-so-nice\",\"settings\",{});\n        }\n\n        let formatversion = game.settings.get(\"dice-so-nice\", \"formatVersion\");\n\n        if (formatversion == \"\" || formatversion != \"4.1\") { //Never updated or first install\n            if (!game.user.isGM) {\n                ui.notifications.warn(game.i18n.localize(\"DICESONICE.migrateMessageNeedGM\"));\n                return false;\n            }\n        } else if (formatversion == \"4.1\") {\n            //Fuck it, lets do this so I'm sure it it not because of DsN itself.\n            if (game.user.isGM) {\n                await Promise.all(game.users.map(async (user) => {\n                    let appearance = user.getFlag(\"dice-so-nice\", \"appearance\") ? duplicate(user.getFlag(\"dice-so-nice\", \"appearance\")) : null;\n                    if (appearance && appearance.hasOwnProperty(\"labelColor\")) {\n                        let data = {\n                            \"-=colorset\":null,\n                            \"-=diceColor\":null,\n                            \"-=edgeColor\":null,\n                            \"-=font\":null,\n                            \"-=labelColor\":null,\n                            \"-=material\":null,\n                            \"-=outlineColor\":null,\n                            \"-=system\":null,\n                            \"-=texture\":null\n                        };\n                        await user.setFlag(\"dice-so-nice\", \"appearance\", data);\n                    }\n                }));\n            } else {\n                let appearance = game.user.getFlag(\"dice-so-nice\", \"appearance\") ? duplicate(game.user.getFlag(\"dice-so-nice\", \"appearance\")) : null;\n                if (appearance && appearance.hasOwnProperty(\"labelColor\")) {\n                    let data = {\n                        \"-=colorset\":null,\n                        \"-=diceColor\":null,\n                        \"-=edgeColor\":null,\n                        \"-=font\":null,\n                        \"-=labelColor\":null,\n                        \"-=material\":null,\n                        \"-=outlineColor\":null,\n                        \"-=system\":null,\n                        \"-=texture\":null\n                    };\n                    await game.user.setFlag(\"dice-so-nice\", \"appearance\", data);\n                }\n            }\n            return true;\n        }\n        let migrated = false;\n        \n        if(formatversion == \"\"){\n            //v1 to v2\n            let settings = game.user.getFlag(\"dice-so-nice\", \"settings\") ? duplicate(game.user.getFlag(\"dice-so-nice\", \"settings\")):{};\n            if (settings.diceColor || settings.labelColor) {\n                let newSettings = mergeObject(game.dice3d.constructor.DEFAULT_OPTIONS, settings, { insertKeys: false, insertValues: false });\n                let appearance = mergeObject(game.dice3d.constructor.DEFAULT_APPEARANCE(), settings, { insertKeys: false, insertValues: false });\n                await game.settings.set(\"dice-so-nice\", \"settings\", mergeObject(newSettings, { \"-=dimensions\": null, \"-=fxList\": null }));\n                await game.user.setFlag(\"dice-so-nice\", \"appearance\", appearance);\n                migrated = true;\n            }\n\n            //v2 to v4\n            await Promise.all(game.users.map(async (user) => {\n                let appearance = user.getFlag(\"dice-so-nice\", \"appearance\") ? duplicate(user.getFlag(\"dice-so-nice\", \"appearance\")) : null;\n                if (appearance && appearance.hasOwnProperty(\"labelColor\")) {\n                    let data = {\n                        global: appearance\n                    };\n                    await user.unsetFlag(\"dice-so-nice\", \"appearance\");\n                    await user.setFlag(\"dice-so-nice\", \"appearance\", data);\n                    migrated = true;\n                }\n\n                let sfxList = user.getFlag(\"dice-so-nice\", \"sfxList\") ? duplicate(user.getFlag(\"dice-so-nice\", \"sfxList\")) : null;\n            \n                if(sfxList){\n                    if(!Array.isArray(sfxList))\n                        sfxList = Object.values(sfxList);\n                    sfxList.forEach((sfx)=>{\n                        sfx.onResult = [sfx.onResult];\n                    });\n                    await user.unsetFlag(\"dice-so-nice\", \"sfxList\");\n                    await user.setFlag(\"dice-so-nice\", \"sfxList\", sfxList);\n                    migrated = true;\n                }\n            }));\n        }\n        //v4 to v4.1 (fix)\n        //Remove the extra properties, no idea why tho\n        await Promise.all(game.users.map(async (user) => {\n            let appearance = user.getFlag(\"dice-so-nice\", \"appearance\") ? duplicate(user.getFlag(\"dice-so-nice\", \"appearance\")) : null;\n            if (appearance && appearance.hasOwnProperty(\"labelColor\")) {\n                let data = {\n                    \"-=colorset\":null,\n                    \"-=diceColor\":null,\n                    \"-=edgeColor\":null,\n                    \"-=font\":null,\n                    \"-=labelColor\":null,\n                    \"-=material\":null,\n                    \"-=outlineColor\":null,\n                    \"-=system\":null,\n                    \"-=texture\":null\n                };\n                await user.setFlag(\"dice-so-nice\", \"appearance\", data);\n            }\n        }));\n\n        game.settings.set(\"dice-so-nice\", \"formatVersion\", \"4.1\");\n        if(migrated)\n            ui.notifications.info(game.i18n.localize(\"DICESONICE.migrateMessage\"));\n        return true;\n    }\n\n\n    /**\n     *\n     * @param cfg\n     * @returns {{}}\n     */\n    static localize(cfg) {\n        return Object.keys(cfg).reduce((i18nCfg, key) => {\n            i18nCfg[key] = game.i18n.localize(cfg[key]);\n            return i18nCfg;\n        }, {}\n        );\n    };\n\n    /**\n     * Get the contrasting color for any hex color.\n     *\n     * @returns {String} The contrasting color (black or white)\n     */\n    static contrastOf(color) {\n\n        if (color.slice(0, 1) === '#') {\n            color = color.slice(1);\n        }\n\n        if (color.length === 3) {\n            color = color.split('').map(function (hex) {\n                return hex + hex;\n            }).join('');\n        }\n\n        const r = parseInt(color.substr(0, 2), 16);\n        const g = parseInt(color.substr(2, 2), 16);\n        const b = parseInt(color.substr(4, 2), 16);\n\n        var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n\n        return (yiq >= 128) ? '#000000' : '#FFFFFF';\n    };\n\n    static prepareTextureList() {\n        return Object.keys(TEXTURELIST).reduce((i18nCfg, key) => {\n            i18nCfg[key] = game.i18n.localize(TEXTURELIST[key].name);\n            return i18nCfg;\n        }, {}\n        );\n    };\n\n    static prepareFontList() {\n        let fontList = {\n            \"auto\": game.i18n.localize(\"DICESONICE.FontAuto\")\n        };\n        game.dice3d.box.dicefactory.fontFamilies.forEach(font => {\n            fontList[font] = font;\n        });\n        return fontList;\n    };\n\n    static prepareColorsetList() {\n        let groupedSetsList = Object.values(COLORSETS);\n        groupedSetsList.sort((set1, set2) => {\n            if (game.i18n.localize(set1.description) < game.i18n.localize(set2.description)) return -1;\n            if (game.i18n.localize(set1.description) > game.i18n.localize(set2.description)) return 1;\n        });\n        let preparedList = {};\n        for (let i = 0; i < groupedSetsList.length; i++) {\n            if (groupedSetsList[i].visibility == 'hidden')\n                continue;\n            let locCategory = game.i18n.localize(groupedSetsList[i].category);\n            if (!preparedList.hasOwnProperty(locCategory))\n                preparedList[locCategory] = {};\n            preparedList[locCategory][groupedSetsList[i].name] = game.i18n.localize(groupedSetsList[i].description);\n        }\n\n        return preparedList;\n    };\n\n    static prepareSystemList() {\n        let systems = game.dice3d.box.dicefactory.systems;\n        return Object.keys(systems).reduce((i18nCfg, key) => {\n            i18nCfg[key] = game.i18n.localize(systems[key].name);\n            return i18nCfg;\n        }, {});\n    };\n\n    static filterObject(obj, predicate) {\n        return Object.keys(obj)\n            .filter(key => predicate(obj[key]))\n            .reduce((res, key) => (res[key] = obj[key], res), {});\n    }\n\n    static actionSaveAs(name){\n        let savesObject = game.user.getFlag(\"dice-so-nice\", \"saves\");\n        let saves;\n        if (!savesObject) {\n            saves = new Map();\n        } else {\n            //workaround for https://gitlab.com/foundrynet/foundryvtt/-/issues/5464\n            saves = new Map(Object.entries(savesObject));\n        }\n        //save current settings first\n        \n        let saveObject = {\n            appearance: game.user.getFlag(\"dice-so-nice\", \"appearance\"),\n            sfxList: game.user.getFlag(\"dice-so-nice\", \"sfxList\"),\n            settings: game.settings.get(\"dice-so-nice\", \"settings\")\n        };\n\n        saves.set(name, saveObject);\n        game.user.unsetFlag(\"dice-so-nice\", \"saves\").then(() => {\n            game.user.setFlag(\"dice-so-nice\", \"saves\", Object.fromEntries(saves));\n        });\n    }\n\n    static async actionDeleteSave(name){\n        let savesObject = game.user.getFlag(\"dice-so-nice\", \"saves\");\n        let saves = new Map(Object.entries(savesObject));\n        saves.delete(name);\n        game.user.unsetFlag(\"dice-so-nice\", \"saves\").then(async () => {\n            await game.user.setFlag(\"dice-so-nice\", \"saves\", Object.fromEntries(saves));\n            ui.notifications.info(game.i18n.localize(\"DICESONICE.saveMessage\"));\n        });\n    }\n\n    static async actionLoadSave(name) {\n        let savesObject = game.user.getFlag(\"dice-so-nice\", \"saves\");\n        let save = new Map(Object.entries(savesObject)).get(name);\n\n        if (save.appearance) {\n            await game.user.unsetFlag(\"dice-so-nice\", \"appearance\");\n            await game.user.setFlag(\"dice-so-nice\", \"appearance\", save.appearance);\n        }\n        if (save.sfxList) {\n            await game.user.unsetFlag(\"dice-so-nice\", \"sfxList\");\n            await game.user.setFlag(\"dice-so-nice\", \"sfxList\", save.sfxList);\n        }\n        if (save.settings) {\n            await game.user.unsetFlag(\"dice-so-nice\", \"settings\");\n            await game.user.setFlag(\"dice-so-nice\", \"settings\", save.settings);\n        }\n    }\n}\n"],"names":["Utils","static","userSettings","game","settings","get","hasOwnProperty","user","setFlag","set","formatversion","isGM","ui","notifications","warn","i18n","localize","Promise","all","users","map","async","appearance","getFlag","duplicate","data","migrated","diceColor","labelColor","newSettings","mergeObject","dice3d","constructor","DEFAULT_OPTIONS","insertKeys","insertValues","DEFAULT_APPEARANCE","global","unsetFlag","sfxList","Array","isArray","Object","values","forEach","sfx","onResult","info","cfg","keys","reduce","i18nCfg","key","color","slice","length","split","hex","join","parseInt","substr","TEXTURELIST","name","fontList","auto","box","dicefactory","fontFamilies","font","groupedSetsList","COLORSETS","sort","set1","set2","description","preparedList","i","visibility","locCategory","category","systems","obj","predicate","filter","res","saves","savesObject","Map","entries","saveObject","then","fromEntries","delete","save"],"mappings":"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"}