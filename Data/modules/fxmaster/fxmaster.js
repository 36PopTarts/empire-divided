const e="fxmaster";function resetFlag(t,a,i){if("object"==typeof i&&!Array.isArray(i)&&null!==i){const s=t.getFlag(e,a);(s?Object.keys(s):[]).forEach((e=>{i[e]||(i[`-=${e}`]=null)}))}return t.setFlag(e,a,i)}function roundToDecimals(e,t){return Number(Math.round(e+"e"+t)+"e-"+t)}const t="FXMaster",a="|";function getLoggingFunction(e="info"){const i=console[e];return(...e)=>i(t,a,...e)}function format(e){return`${t} ${a} ${e}`}const i=Object.freeze({debug:getLoggingFunction("debug"),info:getLoggingFunction("info"),warn:getLoggingFunction("warn"),error:getLoggingFunction("error"),getLoggingFunction});async function migrateWorldCollection(e,t){let a=!1;for(const s of e){i.debug(`Migrating ${e.documentName} '${s.name}' (${s.id}).`);try{await t(s)}catch(t){i.error(`Migration of ${e.documentName} '${s.name}' (${s.id}) failed.`,t),a=!0}}return a}async function migrateCompendiumCollection(e,t){let a=!1;const s=e.metadata.type,n=e.locked;await e.configure({locked:!1});const r=await e.getDocuments();for(const n of r){i.debug(`Migrating ${s} '${n.name}' (${n.id}) in compendium ${e.collection}.`);try{await t(n)}catch(t){i.error(`Migration of ${s} '${n.name}' (${n.id}) in compendium ${e.collection} failed.`,t),a=!0}}return await e.configure({locked:n}),a}async function migrateWorldCollections(e,t){let a=!1;for(const i of e){const e=i.documentName;e in t&&(a|=await migrateWorldCollection(i,t[e]))}return a}async function migrateCompendiumCollections(e,t,{migrateNonWorldPacks:a=!1}={}){let i=!1;for(const s of e){const e=s.metadata.type;("world"===s.metadata.package||a)&&e in t&&(i|=await migrateCompendiumCollection(s,t[e]))}return i}async function migrate$1(e){let t=!1;return t|=await migrateWorldCollections(game.collections,e),t|=await migrateCompendiumCollections(game.packs,e),t}async function migrate2(){return migrate$1(s)}const s={Scene:async function migrateScene$2(t){const a=t.getFlag(e,"effects")??{};if(Object.keys(a).length>0){const e=Object.fromEntries(Object.entries(a).map((([e,a])=>{const i=CONFIG.fxmaster.particleEffects[a.type];return[e,{...a,options:i.convertOptionsToV2(a.options,t)}]})));await resetFlag(t,"effects",e)}}};async function migrate3(){return migrate$1(n)}const n={Macro:async function migrateMacro(t){const{command:a,img:i}=t,s=a?.replaceAll(`${e}.updateWeather`,`${e}.updateParticleEffects`).replaceAll("updateWeather",`${e}.updateParticleEffects`).replaceAll(`${e}.switchWeather`,`${e}.switchParticleEffect`).replaceAll("switchWeather",`${e}.switchParticleEffect`).replaceAll("fxmaster/assets/specialEffects","fxmaster/assets/special-effects").replaceAll("fxmaster/assets/special-effects/fxmaster/smokeBomb.webm","fxmaster/assets/special-effects/fxmaster/smoke-bomb.webm"),n=i?.replaceAll("fxmaster/assets/weatherEffects/icons","fxmaster/assets/particle-effects/icons");s===a&&n===i||await t.update({command:s,img:n})},Scene:async function migrateScene$1(t){void 0!==t.getFlag(e,"filteredLayers")&&await t.unsetFlag(e,"filteredLayers")}};async function migrate4(){return migrate$1(r)}const r={Scene:async function migrateScene(e){const t=Object.keys(CONFIG.originalWeatherEffects);Object.keys(CONFIG.fxmaster.particleEffects).filter((e=>!t.includes(e))).includes(e.weather)&&await e.update({weather:`fxmaster.${e.weather}`})}};const c=4;function isOnTargetWorldMigration(){return game.settings.get(e,"migration")===c}async function migrate1(){const t=game.settings.get(e,"specialEffects");for(let e=0;e<t.length;++e)"object"!=typeof t[e].scale&&(t[e].scale={x:t[e].scale,y:t[e].scale});return await game.settings.set(e,"specialEffects",t),!1}const o=1;async function migrate(){await async function migrateClient(){const t=game.settings.get(e,"clientMigration");if(-1===t)return game.settings.set(e,"clientMigration",o);if(t<o){ui.notifications.info("FXMASTER.MigrationClientStart",{permanent:!0,localize:!0});let a=!1;0===t&&(a|=await migrate1()),a?ui.notifications.error("FXMASTER.MigrationClientCompletedWithErrors",{localize:!0,permanent:!0}):ui.notifications.info("FXMASTER.MigrationClientCompletedSuccessfully",{localize:!0,permanent:!0}),await game.settings.set(e,"clientMigration",o)}}(),game.user.isGM&&await async function migrateWorld(){const t=game.settings.get(e,"migration");if(-1===t)return game.settings.set(e,"migration",c);if(t<c){ui.notifications.info("FXMASTER.MigrationWorldStart",{localize:!0,permanent:!0});let a=!1;switch(t){case 0:case 1:a|=await migrate2();case 2:a|=await migrate3();case 3:a|=await migrate4()}a?(await game.settings.set(e,"disableAll",!0),ui.notifications.error("FXMASTER.MigrationWorldCompletedWithErrors",{localize:!0,permanent:!0})):ui.notifications.info("FXMASTER.MigrationWorldCompletedSuccessfully",{localize:!0,permanent:!0}),await game.settings.set(e,"migration",c)}}()}function isOnTargetMigration(){return isOnTargetWorldMigration()&&function isOnTargetClientMigration(){return game.settings.get(e,"clientMigration")===o}()}function executeWhenWorldIsMigratedToLatest(e){isOnTargetWorldMigration()?e():l.push(e)}const l=[];async function onWorldMigrated(){if(isOnTargetWorldMigration())for(;l.length>0;){const e=l.shift();await e()}}const f={client:{1:{migrate:migrate1}},world:{2:{migrate:migrate2,config:s},3:{migrate:migrate3,config:n},4:{migrate:migrate4,config:r}},helpers:Object.freeze({__proto__:null,migrate:migrate$1,migrateCompendiumCollection,migrateCompendiumCollections,migrateWorldCollection,migrateWorldCollections})};function isEnabled(){return game.settings.get(e,"enable")&&!game.settings.get(e,"disableAll")}const registerHooks=function(){Hooks.on(`${e}.switchParticleEffect`,onSwitchParticleEffects),Hooks.on(`${e}.updateParticleEffects`,onUpdateParticleEffects),Object.keys(m).forEach((e=>Hooks.on(e,function onDeprecated(e){return function(...t){const a=m[e],i=format(`The '${e}' hook is deprecated in favor of the '${a.replacedBy}' hook`);foundry.utils.logCompatibilityWarning(i,{mod:foundry.CONST.COMPATIBILITY_MODES.WARNING,since:"FXMaster v3.0.0",until:"FXMaster v4.0.0",stack:!1}),a.callback(...t)}}(e))))};async function onSwitchParticleEffects(t){if(!canvas.scene)return;const a=canvas.scene.getFlag(e,"effects")??{},i=t.name in a?function omit(e,t){const{[t]:a,...i}=e;return i}(a,t.name):{...a,[t.name]:{type:t.type,options:t.options}};0==Object.keys(i).length?await canvas.scene.unsetFlag(e,"effects"):resetFlag(canvas.scene,"effects",i)}async function onUpdateParticleEffects(e){const t=Object.fromEntries(e.map((e=>[foundry.utils.randomID(),e])));resetFlag(canvas.scene,"effects",t)}const m={updateWeather:{replacedBy:`${e}.updateParticleEffects`,callback:onUpdateParticleEffects},switchWeather:{replacedBy:`${e}.switchParticleEffects`,callback:onSwitchParticleEffects},[`${e}.updateWeather`]:{replacedBy:`${e}.updateParticleEffects`,callback:onUpdateParticleEffects},[`${e}.switchWeather`]:{replacedBy:`${e}.switchParticleEffects`,callback:onSwitchParticleEffects}};function FXMasterFilterEffectMixin(e){return class extends e{constructor(e,t,...a){super(...a),this.id=t,this.enabled=!1,this.configure(e),this.applyOptions(this.constructor.neutral)}id;options;static label="FXMASTER.FilterEffect";static icon="fas fa-filter";static get parameters(){return{}}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}static get neutral(){return{}}configure(e){e&&(this.options={...this.constructor.default,...e})}get optionContext(){return this}applyOptions(e=this.options){const t=Object.keys(e);for(const a of t)this.optionContext[a]=e[a]}play(e={}){this.applyOptions(),this.enabled=!0}async stop(e={}){return this.enabled=!1,this.applyOptions(this.constructor.neutral),!0}async step(){}}}function FadingFilterMixin(t){return class extends(FXMasterFilterEffectMixin(t)){currentAnimation;initialized=!1;async animateOptions(t=this.options,{duration:a=4e3}={}){const i=`${e}.${this.constructor.name}.${this.id}`;void 0!==this.currentAnimation&&(CanvasAnimation.terminateAnimation(i),await this.currentAnimation);const s={name:i,duration:a},[n,r]=Object.entries(t).partition((([e])=>!!this.constructor.parameters[e]?.skipInitialAnimation&&!this.initialized)).map(Object.fromEntries);this.applyOptions(r);const c=Object.entries(n).map((([e,t])=>({parent:this.optionContext,attribute:e,to:t})));return this.currentAnimation=CanvasAnimation.animate(c,s).finally((()=>this.currentAnimation=void 0)),this.currentAnimation}play({skipFading:e=!1,...t}={}){e?super.play({skipFading:e,...t}):(this.enabled=!0,this.animateOptions()),this.initialized=!0}async stop({skipFading:e=!1,...t}={}){if(e)return super.stop({skipFading:e,...t});{const e=await this.animateOptions(this.constructor.neutral);return e&&(this.enabled=!1),e}}}}class BloomFilter extends(FadingFilterMixin(PIXI.filters.AdvancedBloomFilter)){static label="FXMASTER.FilterEffectBloom";static icon="fas fa-ghost";static get parameters(){return{blur:{label:"FXMASTER.Blur",type:"range",max:10,min:0,step:1,value:1},bloomScale:{label:"FXMASTER.Bloom",type:"range",max:1,min:0,step:.1,value:.1},threshold:{label:"FXMASTER.Threshold",type:"range",max:1,min:0,step:.1,value:.5}}}static get neutral(){return{noise:0,bloomScale:0,threshold:1}}}class ColorFilter extends(FadingFilterMixin(PIXI.filters.AdjustmentFilter)){static label="FXMASTER.FilterEffectColor";static icon="fas fa-palette";static get parameters(){return{color:{label:"FXMASTER.Tint",type:"color",value:{value:"#FFFFFF",apply:!1}},saturation:{label:"FXMASTER.Saturation",type:"range",max:2,min:0,step:.1,value:1},contrast:{label:"FXMASTER.Contrast",type:"range",max:2,min:0,step:.1,value:1},brightness:{label:"FXMASTER.Brightness",type:"range",max:2,min:0,step:.1,value:1},gamma:{label:"FXMASTER.Gamma",type:"range",max:2,min:0,step:.1,value:1}}}static get neutral(){return{red:1,green:1,blue:1,saturation:1,gamma:1,brightness:1,contrast:1}}configure(e){if(!e)return;const{color:t,...a}=e,{r:i,g:s,b:n}=foundry.utils.Color.from(t.apply?t.value:16777215);super.configure({...a,red:i,green:s,blue:n})}}class FogFilter extends(FadingFilterMixin(PIXI.Filter)){constructor(e,t){super(e,t,"// SPDX-FileCopyrightText: 2022 Johannes Loher\n//\n// SPDX-License-Identifier: BSD-3-Clause\n\nprecision mediump float;\n\nattribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\nuniform mat3 filterMatrix;\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vFilterCoord;\n\nvoid main(void) {\n  vTextureCoord = aVertexPosition * (outputFrame.zw * inputSize.zw);\n  vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n  vFilterCoord = (filterMatrix * vec3(position, 1.0)).xy;\n  gl_Position = vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n","// SPDX-FileCopyrightText: 2021 SecretFire\n// SPDX-FileCopyrightText: 2022 Johannes Loher\n//\n// SPDX-License-Identifier: BSD-3-Clause\n\nprecision mediump float;\n\nuniform float time;\nuniform vec3 color;\nuniform float density;\nuniform vec2 dimensions;\nuniform sampler2D uSampler;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vFilterCoord;\n\n// generates pseudo-random based on screen position\nfloat random(vec2 pos) {\n  return fract(sin(dot(pos.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// perlin noise\nfloat noise(vec2 pos) {\n  vec2 i = floor(pos);\n  vec2 f = fract(pos);\n  float a = random(i + vec2(0.0, 0.0));\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// fractional brownian motion\nfloat fbm(vec2 pos) {\n  float v = 0.0;\n  float a = 0.5;\n  vec2 shift = vec2(100.);\n  mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n  for(int i = 0; i < 16; i++) {\n    v = (sin(v * 1.07)) + (a * noise(pos));\n    pos = rot * pos * 1.9 + shift;\n    a *= 0.5;\n  }\n  return v;\n}\n\nmat4 contrastMatrix(float contrast) {\n  float t = (1.0 - contrast) * 0.5;\n\n  return mat4(contrast, 0, 0, 0, 0, contrast, 0, 0, 0, 0, contrast, 0, t, t, t, 1);\n}\n\nvec4 fog() {\n  vec2 p = (vFilterCoord.xy * 8. - vFilterCoord.xy) * dimensions * 0.00025;\n\n  float time2 = time * 0.0025;\n\n  vec2 q = vec2(0.0);\n  q.x = fbm(p);\n  q.y = fbm(p);\n  vec2 r = vec2(-1.0);\n  r.x = fbm(p * q + vec2(1.7, 9.2) + .15 * time2);\n  r.y = fbm(p * q + vec2(9.3, 2.8) + .35 * time2);\n  float f = fbm(p * .2 + r * 3.102);\n\n  vec4 fogPixel = mix(vec4(color, 1.0), vec4(1.5, 1.5, 1.5, 1.5), clamp(length(r.x), 0.4, 1.));\n\n  return (f * f * f + 0.6 * f * f + 0.5 * f) * fogPixel;\n}\n\nvoid main(void) {\n  vec4 pixel = texture2D(uSampler, vTextureCoord);\n\n    // to avoid computation on an invisible pixel.\n  if(pixel.a == 0.) {\n    gl_FragColor = pixel;\n    return;\n  }\n\n  vec4 fogPixel = contrastMatrix(3.0) * fog();\n  gl_FragColor = mix(pixel, fogPixel, 1. * density) * pixel.a;\n}\n"),this.uniforms.time=0,this.uniforms.dimensions=new Float32Array([0,0]),this.uniforms.color=new Float32Array([0,0,0,1])}lastTick;static label="FXMASTER.FilterEffectFog";static icon="fas fa-cloud";static get parameters(){return{dimensions:{label:"FXMASTER.Scale",type:"range",max:5,min:0,step:.1,value:1,skipInitialAnimation:!0},speed:{label:"FXMASTER.Speed",type:"range",max:5,min:0,step:.1,value:1,skipInitialAnimation:!0},density:{label:"FXMASTER.Density",type:"range",max:1,min:0,step:.05,value:.65},color:{label:"FXMASTER.Tint",type:"color",value:{value:"#000000",apply:!1},skipInitialAnimation:!0}}}static get neutral(){return{density:0}}get r(){return this.uniforms.color[0]}set r(e){this.uniforms.color[0]=e}get g(){return this.uniforms.color[1]}set g(e){this.uniforms.color[1]=e}get b(){return this.uniforms.color[2]}set b(e){this.uniforms.color[2]=e}get density(){return this.uniforms.density}set density(e){this.uniforms.density=e}get dimensions(){return this.uniforms.dimensions[0]}set dimensions(e){this.uniforms.dimensions[0]=this.uniforms.dimensions[1]=100*e/(canvas?.dimensions?.size??100)}configure(e){if(!e)return;const{color:t,...a}=e,{r:i,g:s,b:n}=foundry.utils.Color.from(t.apply?t.value:0);super.configure({...a,r:i,g:s,b:n})}play(e){this.lastTick=canvas.app.ticker.lastTime,super.play(e)}async step(){const e=canvas.app.ticker.lastTime-this.lastTick;this.lastTick=canvas.app.ticker.lastTime,this.uniforms.time+=e*this.speed*.1,await super.step()}apply(e,t,a,i,s){return this.uniforms.filterMatrix??=new PIXI.Matrix,this.uniforms.filterMatrix.copyFrom(s.target.worldTransform).invert(),super.apply(e,t,a,i,s)}}const u={Linear:function easeLinear(e){return e},InSine:function easeInSine(e){return 1-Math.cos(e*Math.PI/2)},OutSine:function easeOutSine(e){return Math.sin(e*Math.PI/2)},InOutSine:function easeInOutSine(e){return-(Math.cos(Math.PI*e)-1)/2},InBack:function easeInBack(e){const t=1.70158;return(t+1)*e*e*e-t*e*e},OutBack:function easeOutBack(e){const t=1.70158;return 1+(t+1)*Math.pow(e-1,3)+t*Math.pow(e-1,2)},InOutBack:function easeInOutBack(e){const t=2.5949095;return e<.5?Math.pow(2*e,2)*(7.189819*e-t)/2:(Math.pow(2*e-2,2)*((t+1)*(2*e-2)+t)+2)/2},InCubic:function easeInCubic(e){return e*e*e},OutCubic:function easeOutCubic(e){return 1-Math.pow(1-e,3)},InOutCubic:function easeInOutCubic(e){return e<.5?4*e*e*e:1-Math.pow(-2*e+2,3)/2},InCirc:function easeInCirc(e){return 1-Math.sqrt(1-Math.pow(e,2))},OutCirc:function easeOutCirc(e){return Math.sqrt(1-Math.pow(e-1,2))},InOutCirc:function easeInOutCirc(e){return e<.5?(1-Math.sqrt(1-Math.pow(2*e,2)))/2:(Math.sqrt(1-Math.pow(-2*e+2,2))+1)/2}};class LightningFilter extends(FXMasterFilterEffectMixin(PIXI.filters.AdjustmentFilter)){constructor(e,t){super(e,t),this.nextLigthningTime=canvas.app.ticker.lastTime/10}nextLigthningTime;static label="FXMASTER.FilterEffectLightning";static icon="fas fa-bolt-lightning";static get parameters(){return{frequency:{label:"FXMASTER.Period",type:"range",max:2e3,min:100,step:5,value:500},spark_duration:{label:"FXMASTER.Duration",type:"range",max:2e3,min:100,step:5,value:300},brightness:{label:"FXMASTER.Brightness",type:"range",max:4,min:0,step:.1,value:1.3}}}static get neutral(){return{frequency:0,spark_duration:0,brightness:1}}play(e={}){this.enabled=!0}async step(){if(canvas.app.ticker.lastTime/10>this.nextLigthningTime){this.nextLigthningTime=canvas.app.ticker.lastTime/10+40+this.options.frequency*Math.random();const animate=t=>{const a=[{parent:this,attribute:"brightness",to:t}];return CanvasAnimation.animate(a,{name:`${e}.${this.constructor.name}.${this.id}.${randomID()}`,context:this,duration:100+this.options.spark_duration*Math.random(),easing:u.InOutBack})};await animate(this.options.brightness),await animate(1),await super.step()}}}class OldFilmFilter extends(FXMasterFilterEffectMixin(PIXI.filters.OldFilmFilter)){constructor(e,t){super(e,t),this.vignetting=0,this.vignettingAlpha=0}static label="FXMASTER.FilterEffectOldFilm";static icon="fas fa-film";static get parameters(){return{sepia:{label:"FXMASTER.Sepia",type:"range",max:1,min:0,step:.1,value:.3},noise:{label:"FXMASTER.Noise",type:"range",max:1,min:0,step:.1,value:.1}}}static get neutral(){return{sepia:0,noise:0}}play(e={}){this.seed=Math.random(),super.play(e)}async step(){this.seed=Math.random(),await super.step()}}class PredatorFilter extends(FXMasterFilterEffectMixin(PIXI.filters.CRTFilter)){constructor(e,t){super(e,t),this.vignetting=0,this.curvature=0}static label="FXMASTER.FilterEffectPredator";static icon="fas fa-wave-square";static get parameters(){return{noise:{label:"FXMASTER.Noise",type:"range",max:1,min:0,step:.1,value:.1},period:{label:"FXMASTER.Speed",type:"range",max:.1,min:0,step:.001,value:.001},lineWidth:{label:"FXMASTER.LineWidth",type:"range",max:10,min:0,step:.1,value:1}}}static get neutral(){return{noise:0,period:1e3}}play(e={}){this.seed=Math.random(),super.play(e)}async step(){this.seed=Math.random();const e=1/this.options.period;this.time=canvas.app.ticker.lastTime/e,await super.step()}}class UnderwaterFilter extends(FXMasterFilterEffectMixin(PIXI.filters.DisplacementFilter)){constructor(e,t){const a=PIXI.Sprite.from("modules/fxmaster/assets/filter-effects/effects/underwater/displacement-map.png");super(e,t,a),this.displacementMap=a,this.displacementMap.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.displacementMap.anchor.set(.5),this.displacementMap.x=canvas.scene.width/2,this.displacementMap.y=canvas.scene.height/2}static label="FXMASTER.FilterEffectUnderwater";static icon="fas fa-water";static get parameters(){return{speed:{label:"FXMASTER.Speed",type:"range",max:5,min:0,step:.1,value:.3},scale:{label:"FXMASTER.Scale",type:"number",value:4}}}static get neutral(){return{speed:0,scale:1}}applyOptions(){}play(e={}){this.displacementMap.scale.x=this.options.scale,this.displacementMap.scale.y=this.options.scale,canvas.primary.addChild(this.displacementMap),super.play(e)}async stop(e={}){await super.stop(e),canvas.primary.removeChild(this.displacementMap)}async step(){this.maskSprite.x+=this.options.speed,await super.step()}}const p={bloom:BloomFilter,color:ColorFilter,fog:FogFilter,lightning:LightningFilter,oldfilm:OldFilmFilter,predator:PredatorFilter,underwater:UnderwaterFilter};class FXMasterParticleEffect extends ParticleEffect{static label="FXMASTER.ParticleEffect";static get group(){return"other"}static get icon(){return"modules/fxmaster/assets/particle-effects/icons/snow.png"}static get parameters(){return{scale:{label:"FXMASTER.Scale",type:"range",min:.1,value:1,max:5,step:.1,decimals:1},direction:{label:"FXMASTER.Direction",type:"range",min:0,value:this.defaultDirection,max:360,step:5,decimals:0},speed:{label:"FXMASTER.Speed",type:"range",min:.1,value:1,max:5,step:.1,decimals:1},lifetime:{label:"FXMASTER.Lifetime",type:"range",min:.1,value:1,max:5,step:.1,decimals:1},density:{label:"FXMASTER.Density",type:"range",min:.1,value:.5,max:5,step:.1,decimals:1},alpha:{label:"FXMASTER.Opacity",type:"range",min:0,value:1,max:1,step:.1,decimals:1},tint:{label:"FXMASTER.Tint",type:"color",value:{value:"#FFFFFF",apply:!1}}}}static mergeWithDefaults(e){return foundry.utils.mergeObject(this.parameters,e,{insertKeys:!1,inplace:!1})}static get defaultConfig(){throw new Error("Subclasses of FXMasterParticleEffect must implement defaultConfig")}static get defaultDirection(){const e=this.defaultConfig.behaviors.find((e=>"rotation"===e.type));if(void 0!==e)return(e.config.minStart+e.config.maxStart)/2;const t=this.defaultConfig.behaviors.find((e=>"rotationStatic"===e.type));return void 0!==t?(t.config.min+t.config.max)/2:void 0}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}applyOptionsToConfig(e,t){this._applyScaleToConfig(e,t),this._applySpeedToConfig(e,t),this._applyDirectionToConfig(e,t),this._applyLifetimeToConfig(e,t),this._applyTintToConfig(e,t),this._applyAlphaToConfig(e,t)}_applyFactorToValueList(e,t){e.list=e.list.map((e=>({...e,value:e.value*t})))}_applyFactorToRandNumber(e,t){e.min=e.min*t,e.max=e.max*t}_applyScaleToConfig(e,t){const a=(e.scale?.value??1)*(canvas.dimensions.size/100);t.behaviors.filter((e=>"scale"===e.type)).forEach((({config:e})=>this._applyFactorToValueList(e.scale,a))),t.behaviors.filter((e=>"scaleStatic"===e.type)).forEach((({config:e})=>this._applyFactorToRandNumber(e,a)))}_applySpeedToConfig(e,t){const a=(e.speed?.value??1)*(canvas.dimensions.size/100);t.behaviors.filter((e=>["moveSpeed","movePath"].includes(e.type))).forEach((({config:e})=>this._applyFactorToValueList(e.speed,a))),t.behaviors.filter((e=>"moveSpeedStatic"===e.type)).forEach((({config:e})=>this._applyFactorToRandNumber(e,a))),this._applyFactorToRandNumber(t.lifetime,1/a),t.frequency/=a}_applyDirectionToConfig(e,t){const a=e.direction?.value;void 0!==a&&(t.behaviors.filter((e=>"rotation"===e.type)).forEach((({config:e})=>{const t=e.maxStart-e.minStart;e.minStart=a-t/2,e.maxStart=a+t/2})),t.behaviors.filter((e=>"rotationStatic"===e.type)).forEach((({config:e})=>{const t=e.max-e.min;e.min=a-t/2,e.max=a+t/2})))}_applyLifetimeToConfig(e,t){const a=e.lifetime?.value??1;this._applyFactorToRandNumber(t.lifetime,a),t.frequency*=a}_applyTintToConfig(e,t){if(e.tint?.value.apply){const a=e.tint.value.value;t.behaviors=t.behaviors.filter((({type:e})=>"color"!==e&&"colorStatic"!==e)).concat({type:"colorStatic",config:{color:a}})}}_applyAlphaToConfig(e,t){const a=e.alpha?.value??1;t.behaviors.filter((e=>"alpha"===e.type)).forEach((({config:e})=>this._applyFactorToValueList(e.alpha,a))),t.behaviors.filter((e=>"alphaStatic"===e.type)).forEach((({config:e})=>{e.alpha*=a}))}play({prewarm:e=!1}={}){e&&this.emitters.forEach((e=>{e.autoUpdate=!1,e.emit=!0,e.update(e.maxLifetime),e.autoUpdate=!0})),super.play()}async fadeOut({timeout:e}={}){const t=this.emitters.map((e=>new Promise((t=>{e.emitterLifetime=.1,e.playOnceAndDestroy((()=>{t()}))})))),a=[Promise.all(t)];void 0!==e&&a.push(new Promise((t=>setTimeout(t,e))).then(this.destroy.bind(this))),await Promise.race(a),this.stop()}static convertOptionsToV2(e,t){return Object.fromEntries(Object.entries(e).map((([e,a])=>{switch(e){case"scale":return[e,this._convertScaleToV2(a,t)];case"speed":return[e,this._convertSpeedToV2(a,t)];case"density":return[e,this._convertDensityToV2(a,t)];default:return[e,a]}})))}static _convertScaleToV2(e,t){const a=this.parameters.scale?.decimals??1;return roundToDecimals(e*(100/t.dimensions.size),a)}static _convertSpeedToV2(e,t){const a=this.defaultConfig.behaviors.filter((({type:e})=>"moveSpeed"===e)).flatMap((({config:e})=>e.speed.list.map((e=>e.value)))),i=Math.max(...a),s=this.parameters.speed?.decimals??1;return roundToDecimals(e/i*(100/t.dimensions.size),s)}static _convertDensityToV2(e,t){const a=t.dimensions;return roundToDecimals(e/(a.width/a.size*(a.height/a.size)),this.parameters.density?.decimals??1)}}function DefautlRectangleSpawnMixin(e){return class extends e{getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.defaultConfig);return i.maxParticles=a,i.frequency=i.lifetime.min/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height}}}),this.applyOptionsToConfig(e,i),[this.createEmitter(i)]}}}class SpiderParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectSpiders";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/spiders.png"}static get group(){return"animals"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.3,max:.7,step:.05,decimals:2},"-=direction":null},{performDeletions:!0})}static SPIDERS_CONFIG={lifetime:{min:5,max:10},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:15},{time:1,value:25}]},minMult:.6}},{type:"scale",config:{scale:{list:[{value:.05,time:0},{value:.08,time:.05},{value:.08,time:.95},{value:.05,time:1}]},minMult:.2}},{type:"rotationStatic",config:{min:0,max:359}},{type:"animatedSingle",config:{anim:{framerate:30,loop:!0,textures:Array.fromRange(25).map((e=>({count:1,texture:`modules/fxmaster/assets/particle-effects/effects/spiders/spider${String(e+1).padStart(2,"0")}.png`})))}}}]};static get defaultConfig(){return this.SPIDERS_CONFIG}}function withSteppedGradientColor(e,t,a=10){return e.getBehavior("color")&&e.getBehavior("color").list.reset(PIXI.particles.ParticleUtils.createSteppedGradient(t.behaviors.find((({type:e})=>"color"===e)).config.color.list,a)),e}class StarsParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectStars";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/stars.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.3,max:1,step:.05,decimals:2},tint:{value:{value:"#bee8ee"}},"-=direction":null},{performDeletions:!0})}static STARS_CONFIG={lifetime:{min:8,max:15},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.9,time:.3},{value:.9,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:3,max:5}},{type:"scale",config:{scale:{list:[{value:.05,time:0},{value:.03,time:1}]},minMult:.85}},{type:"rotation",config:{accel:0,minSpeed:20,maxSpeed:50,minStart:0,maxStart:365}},{type:"textureRandom",config:{textures:Array.fromRange(8).map((e=>`modules/fxmaster/assets/particle-effects/effects/stars/star${e+1}.png`))}},{type:"color",config:{color:{list:[{value:"bee8ee",time:0},{value:"d0e8ec",time:1}]}}},{type:"blendMode",config:{blendMode:"screen"}}]};static get defaultConfig(){return this.STARS_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.STARS_CONFIG);i.maxParticles=a,i.frequency=i.lifetime.min/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height}}}),this.applyOptionsToConfig(e,i);return[withSteppedGradientColor(this.createEmitter(i),i)]}}class AutumnLeavesParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectLeaves";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/leaves.png"}static get group(){return"weather"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.25,max:1,step:.05,decimals:2},"-=direction":null},{performDeletions:!0})}static LEAF_CONFIG={lifetime:{min:10,max:10},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.9},{time:1,value:.5}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:20},{time:1,value:60}]},minMult:.6}},{type:"scale",config:{scale:{list:[{time:0,value:.2},{time:1,value:.4}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:100,maxSpeed:200,minStart:0,maxStart:365}},{type:"textureRandom",config:{textures:Array.fromRange(6).map((e=>`ui/particles/leaf${e+1}.png`))}}]};static get defaultConfig(){return this.LEAF_CONFIG}}class BatsParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectBats";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/bats.png"}static get group(){return"animals"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.005,value:.05,max:.1,step:.005,decimals:3},"-=direction":null},{performDeletions:!0})}static BATS_CONFIG={lifetime:{min:20,max:40},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:200},{time:1,value:260}]},minMult:.8}},{type:"scale",config:{scale:{list:[{value:.02,time:0},{value:.1,time:.05},{value:.1,time:.95},{value:.02,time:1}]}}},{type:"rotationStatic",config:{min:0,max:359}},{type:"animatedSingle",config:{anim:{framerate:30,loop:!0,textures:[{texture:1,count:1},{texture:2,count:1},{texture:3,count:1},{texture:4,count:1},{texture:5,count:2},{texture:4,count:1},{texture:3,count:1},{texture:2,count:1}].map((({texture:e,count:t})=>({texture:`modules/fxmaster/assets/particle-effects/effects/bats/bat${e}.png`,count:t})))}}}]};static get defaultConfig(){return this.BATS_CONFIG}}class BubblesParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectBubbles";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/bubbles.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.01,value:.15,max:.5,step:.01,decimals:2},"-=direction":null},{performDeletions:!0})}static BUBBLES_CONFIG={lifetime:{min:8,max:10},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.85,time:.05},{value:.85,time:.98},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:20},{time:1,value:60}]},minMult:.6}},{type:"scale",config:{scale:{list:[{value:.25,time:0},{value:.5,time:1}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:100,maxSpeed:200,minStart:0,maxStart:365}},{type:"textureSingle",config:{texture:"modules/fxmaster/assets/particle-effects/effects/bubbles/bubble.png"}}]};static get defaultConfig(){return this.BUBBLES_CONFIG}}class CloudsParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectClouds";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/clouds.png"}static get group(){return"weather"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.03,max:.2,step:.001,decimals:3}})}static CLOUDS_CONFIG={behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:.08,max:.8}},{type:"rotationStatic",config:{min:80,max:100}},{type:"textureRandom",config:{textures:Array.fromRange(4).map((e=>`modules/fxmaster/assets/particle-effects/effects/clouds/cloud${e+1}.png`))}}]};static get defaultConfig(){return this.CLOUDS_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=2/3,s=foundry.utils.deepClone(this.constructor.CLOUDS_CONFIG),n=s.behaviors.find((({type:e})=>"moveSpeedStatic"===e))?.config;if(void 0===n)throw new Error("Expected CLOUDS_CONFIG to have a moveSpeedStatic behavior but it didn't.");const r=Math.sqrt(t.sceneRect.width*t.sceneRect.width+t.sceneRect.height*t.sceneRect.height)/((n.min+n.max)/2),c=r/i/2,o=r/i,l=Math.toRadians(e.direction.value),f=Math.cos(l),m=Math.sin(l);return s.maxParticles=a,s.frequency=(c+o)/2/a,s.lifetime={min:c,max:o},s.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x-f*t.sceneRect.width*i,y:t.sceneRect.y-m*t.sceneRect.height*i,w:t.sceneRect.width,h:t.sceneRect.height}}}),this.applyOptionsToConfig(e,s),[this.createEmitter(s)]}}class CrowsParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectCrows";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/crows.png"}static get group(){return"animals"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.006,max:.01,step:.001,decimals:3},"-=direction":null},{performDeletions:!0})}static CROWS_CONFIG={lifetime:{min:20,max:40},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:90},{time:1,value:100}]},minMult:.6}},{type:"scale",config:{scale:{list:[{value:.03,time:0},{value:.12,time:.1},{value:.12,time:.9},{value:.03,time:1}]}}},{type:"rotationStatic",config:{min:0,max:359}},{type:"animatedSingle",config:{anim:{framerate:15,loop:!0,textures:[{texture:1,count:20},{texture:2,count:3},{texture:3,count:2},{texture:4,count:2},{texture:3,count:2},{texture:2,count:3}].map((({texture:e,count:t})=>({texture:`modules/fxmaster/assets/particle-effects/effects/crows/crow${e}.png`,count:t})))}}}]};static get defaultConfig(){return this.CROWS_CONFIG}}function parseSpriteSheetSync(){let e;return this._callback=t=>e=Object.values(t),this._batchIndex=0,this._processFrames(0),this._processAnimations(),this._parseComplete(),e}class FogParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectFog";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/fog.png"}static get group(){return"weather"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.01,value:.08,max:.15,step:.01,decimals:2},"-=direction":null},{performDeletions:!0})}static FOG_CONFIG={lifetime:{min:10,max:25},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.1,time:.1},{value:.3,time:.5},{value:.1,time:.9},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:15},{time:1,value:10}]},minMult:.2}},{type:"scale",config:{scale:{list:[{value:1.5,time:0},{value:1,time:1}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:.15,maxSpeed:.35,minStart:0,maxStart:365}},{type:"textureRandom",config:{textures:Array.fromRange(4).map((e=>`modules/fxmaster/assets/particle-effects/effects/clouds/cloud${e+1}.png`))}},{type:"colorStatic",config:{color:"dddddd"}}]};static get defaultConfig(){return this.FOG_CONFIG}}class RatsParticleEffect extends(DefautlRectangleSpawnMixin(FXMasterParticleEffect)){static label="FXMASTER.ParticleEffectRats";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/rats.png"}static get group(){return"animals"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.006,max:.1,step:.001,decimals:3},"-=direction":null},{performDeletions:!0})}static RATS_CONFIG={lifetime:{min:20,max:40},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:120,max:200}},{type:"scale",config:{scale:{list:[{value:.03,time:0},{value:.125,time:.1},{value:.125,time:.9},{value:.03,time:1}]},minMult:.5}},{type:"rotationStatic",config:{min:0,max:359}},{type:"animatedSingle",config:{anim:{framerate:"10",loop:!0,textures:Array.fromRange(5).map((e=>`modules/fxmaster/assets/particle-effects/effects/rats/rat${e+1}.png`))}}}]};static get defaultConfig(){return this.RATS_CONFIG}}class SnowstormParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectSnowstorm";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/snow-storm.png"}static get group(){return"weather"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.6,max:1,step:.05,decimals:2}})}static SNOWSTORM_CONFIG={lifetime:{min:2.5,max:6},behaviors:[{type:"alphaStatic",config:{alpha:1}},{type:"movePath",config:{path:"sin(x / 150) * 25",speed:{list:[{value:400,time:0},{value:350,time:1}]},minMult:.2}},{type:"scale",config:{scale:{list:[{value:.2,time:0},{value:.08,time:1}]},minMult:.8}},{type:"rotation",config:{accel:0,minSpeed:-60,maxSpeed:60,minStart:86,maxStart:94}},{type:"textureRandom",config:{textures:Array.fromRange(2).map((e=>`modules/fxmaster/assets/particle-effects/effects/snowstorm/snow${e+1}.png`))}}]};static get defaultConfig(){return this.SNOWSTORM_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.defaultConfig);return i.maxParticles=a,i.frequency=(i.lifetime.min+i.lifetime.max)/2/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height}}}),this.applyOptionsToConfig(e,i),[this.createEmitter(i)]}}const d={filterEffects:p,particleEffects:{bats:BatsParticleEffect,birds:class BirdsParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectBirds";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/crows.png"}static get group(){return"animals"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.006,max:.01,step:.001,decimals:3},"-=direction":null,animations:{label:"FXMASTER.Animations",type:"multi-select",options:{glide:"FXMASTER.ParicleEffectBirdsAnimationsGlide",flap:"FXMASTER.ParicleEffectBirdsAnimationsFlap",mixed:"FXMASTER.ParicleEffectBirdsAnimationsMixed"},value:["mixed"]}},{performDeletions:!0})}static BIRDS_CONFIG={lifetime:{min:20,max:40},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:90},{time:1,value:100}]},minMult:.6}},{type:"scale",config:{scale:{list:[{value:.3,time:0},{value:.7,time:.1},{value:.7,time:.9},{value:.3,time:1}]}}},{type:"rotationStatic",config:{min:0,max:359}}]};static get defaultConfig(){return this.BIRDS_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.BIRDS_CONFIG);return i.maxParticles=a,i.frequency=i.lifetime.min/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height}}}),i.behaviors.push({type:"animatedRandom",config:{anims:this._getAnimations(e)}}),this.applyOptionsToConfig(e,i),[this.createEmitter(i)]}_getAnimations(e){const t={glide:[{textureNumber:2,count:30},...Array(4).fill([{texture:1,count:3},{texture:2,count:2},{texture:3,count:3},{texture:2,count:2}]).deepFlatten(),{texture:2,count:68}],flap:[{texture:1,count:3},{texture:2,count:2},{texture:3,count:3},{texture:2,count:2}],mixed:[{texture:2,count:7},{texture:1,count:3},{texture:2,count:2},{texture:3,count:3},{texture:2,count:7}]},getAnim=e=>({framerate:20,loop:!0,textures:e.map((({texture:e,count:t})=>({texture:`modules/fxmaster/assets/particle-effects/effects/birds/bird${e}.png`,count:t})))}),a=(e.animations?.value??[]).filter((e=>Object.keys(t).includes(e))).map((e=>getAnim(t[e])));return 0===a.length&&a.push(getAnim(t.mixed)),a}},crows:CrowsParticleEffect,eagles:class EaglesParticleEffect extends FXMasterParticleEffect{static _textureCache;static label="FXMASTER.ParticleEffectEagles";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/crows.png"}static get group(){return"animals"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:5e-4,value:.002,max:.01,step:5e-4,decimals:4},"-=direction":null,animations:{label:"FXMASTER.Animations",type:"multi-select",options:{flap:"FXMASTER.ParicleEffectBirdsAnimationsFlap",glide:"FXMASTER.ParicleEffectBirdsAnimationsGlide"},value:["glide"]}},{performDeletions:!0})}static EAGLES_CONFIG={lifetime:{min:7,max:14},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:360},{time:1,value:400}]},minMult:.6}},{type:"scale",config:{scale:{list:[{value:.15,time:0},{value:.3,time:.1},{value:.3,time:.9},{value:.15,time:1}]}}},{type:"rotationStatic",config:{min:0,max:359}}]};static get defaultConfig(){return this.EAGLES_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.EAGLES_CONFIG);return i.maxParticles=a,i.frequency=i.lifetime.min/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height}}}),i.behaviors.push({type:"animatedRandom",config:{anims:this._getAnimations(e)}}),this.applyOptionsToConfig(e,i),[this.createEmitter(i)]}_getAnimations(e){this._textures||this._initializeTextures();const t=Array.fromRange(19).map((e=>({textureNumber:e,count:1}))),a={glide:[{textureNumber:0,count:30},...Array(4).fill(t).deepFlatten(),{textureNumber:0,count:68}],flap:t},getAnim=e=>({framerate:20,loop:!0,textures:e.map((({textureNumber:e,count:t})=>({texture:this._textures[e],count:t})))}),i=(e.animations?.value??[]).filter((e=>Object.keys(a).includes(e))).map((e=>getAnim(a[e])));return 0===i.length&&i.push(getAnim(a.glide)),i}get _textures(){if(!this.constructor._textureCache){const e=PIXI.Texture.from("modules/fxmaster/assets/particle-effects/effects/eagles/eagle.png"),t={meta:{scale:"1"},frames:{"eagle0000.png":{frame:{x:0,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0001.png":{frame:{x:512,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0002.png":{frame:{x:0,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0003.png":{frame:{x:512,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0004.png":{frame:{x:1024,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0005.png":{frame:{x:1024,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0006.png":{frame:{x:0,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0007.png":{frame:{x:512,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0008.png":{frame:{x:1024,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0009.png":{frame:{x:1536,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0010.png":{frame:{x:1536,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0011.png":{frame:{x:1536,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0012.png":{frame:{x:0,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0013.png":{frame:{x:512,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0014.png":{frame:{x:1024,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0015.png":{frame:{x:1536,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0016.png":{frame:{x:2048,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0017.png":{frame:{x:2048,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0018.png":{frame:{x:2048,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0019.png":{frame:{x:2048,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}}}},a=new PIXI.Spritesheet(e,t);this.constructor._textureCache=parseSpriteSheetSync.call(a)}return this.constructor._textureCache}},rats:RatsParticleEffect,spiders:SpiderParticleEffect,bubbles:BubblesParticleEffect,embers:class EmbersParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectEmbers";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/embers.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.7,max:1.4,step:.05,decimals:2},tint:{value:{value:"#f77300"}},"-=direction":null},{performDeletions:!0})}static EMBERS_CONFIG={lifetime:{min:4,max:6},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.9,time:.3},{value:.9,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:24,max:40}},{type:"scale",config:{scale:{list:[{value:.15,time:0},{value:.01,time:1}]},minMult:.85}},{type:"rotation",config:{accel:0,minSpeed:100,maxSpeed:200,minStart:0,maxStart:365}},{type:"textureSingle",config:{texture:"modules/fxmaster/assets/particle-effects/effects/embers/ember.png"}},{type:"color",config:{color:{list:[{value:"f77300",time:0},{value:"f72100",time:1}]}}},{type:"blendMode",config:{blendMode:"screen"}}]};static get defaultConfig(){return this.EMBERS_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.EMBERS_CONFIG);i.maxParticles=a,i.frequency=i.lifetime.min/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height}}}),this.applyOptionsToConfig(e,i);return[withSteppedGradientColor(this.createEmitter(i),i)]}},stars:StarsParticleEffect,leaves:AutumnLeavesParticleEffect,clouds:CloudsParticleEffect,fog:FogParticleEffect,rain:class RainParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectRain";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/rain.png"}static get group(){return"weather"}static RAIN_CONFIG={lifetime:{min:.5,max:.5},pos:{x:0,y:0},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.7},{time:1,value:.1}]}}},{type:"moveSpeedStatic",config:{min:2800,max:3500}},{type:"scaleStatic",config:{min:.8,max:1}},{type:"rotationStatic",config:{min:75,max:75}},{type:"textureSingle",config:{texture:"ui/particles/rain.png"}}]};static SPLASH_CONFIG={lifetime:{min:.5,max:.5},pos:{x:0,y:0},behaviors:[{type:"moveSpeedStatic",config:{min:0,max:0}},{type:"scaleStatic",config:{min:.48,max:.6}},{type:"rotationStatic",config:{min:-90,max:-90}},{type:"noRotation",config:{}},{type:"textureSingle",config:{texture:"ui/particles/drop.png"}}]};static get defaultConfig(){return this.RAIN_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.RAIN_CONFIG);i.maxParticles=a,i.frequency=1/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:-.05*t.width,y:-.1*t.height,w:t.width,h:.8*t.height}}}),this.applyOptionsToConfig(e,i);const s=foundry.utils.deepClone(this.constructor.SPLASH_CONFIG);return s.maxParticles=.5*a,s.frequency=2/a,s.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:0,y:.25*t.height,w:t.width,h:.75*t.height}}}),this.applyOptionsToConfig(e,s),[this.createEmitter(i),this.createEmitter(s)]}},raintop:class RainTopParticleEffect extends FXMasterParticleEffect{_canvasPanHookId;static label="FXMASTER.ParticleEffectRainTop";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/rain.png"}static get group(){return"weather"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.01,value:.3,max:1,step:.01,decimals:2},"-=direction":null},{performDeletions:!0})}static RAIN_TOP_CONFIG={lifetime:{min:.6,max:.7},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.6,time:.8},{value:.23,time:1}]}}},{type:"scale",config:{scale:{list:[{value:3,time:0},{value:.4,time:1}]},minMult:.7}},{type:"rotationStatic",config:{min:180,max:180}},{type:"textureSingle",config:{texture:"ui/particles/rain.png"}}]};static get defaultConfig(){return this.RAIN_TOP_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=Math.sqrt(t.sceneWidth*t.sceneWidth+t.sceneHeight*t.sceneHeight)/2,s=foundry.utils.deepClone(this.constructor.RAIN_TOP_CONFIG);s.maxParticles=a,s.frequency=s.lifetime.min/a,s.behaviors.push({type:"moveSpeed",config:{speed:{list:[{time:0,value:1600},{time:1,value:2e3}]},minMult:.8}}),this.applyOptionsToConfig(e,s);const n=s.behaviors.find((({type:e})=>"moveSpeed"===e)).config.speed.list,r=n.reduce(((e,t)=>e+t.value),0)/n.length;s.behaviors.push({type:"spawnShape",config:{type:"torus",data:{x:t.sceneRect.x+t.sceneWidth/2,y:t.sceneRect.y+t.sceneHeight/2,radius:r*s.lifetime.max+2*i,innerRadius:r*s.lifetime.max,affectRotation:!0}}});const c=this.createEmitter(s);return c.updateOwnerPos(canvas.stage.pivot.x-t.sceneX-t.sceneWidth/2,canvas.stage.pivot.y-t.sceneY-t.sceneHeight/2),[c]}play(){this._unregisterCanvasPanHook(),this._canvasPanHookId=Hooks.on("canvasPan",((e,t)=>{const a=canvas.dimensions;for(let e of this.emitters)e.updateOwnerPos(t.x-a.sceneX-a.sceneWidth/2,t.y-a.sceneY-a.sceneHeight/2)})),super.play()}stop(){this._unregisterCanvasPanHook(),super.stop()}_unregisterCanvasPanHook(){void 0!==this._canvasPanHookId&&(Hooks.off("canvasPan",this._canvasPanHookId),this._canvasPanHookId=void 0)}},rainsimple:class RainSimpleParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectRainSimple";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/rain.png"}static get group(){return"weather"}static RAIN_CONFIG={lifetime:{min:.5,max:.5},pos:{x:0,y:0},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.7},{time:1,value:.1}]}}},{type:"moveSpeedStatic",config:{min:2800,max:3500}},{type:"scaleStatic",config:{min:.8,max:1}},{type:"rotationStatic",config:{min:75,max:75}},{type:"textureSingle",config:{texture:"ui/particles/rain.png"}}]};static get defaultConfig(){return this.RAIN_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.RAIN_CONFIG);return i.maxParticles=a,i.frequency=1/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:-.05*t.width,y:-.1*t.height,w:t.width,h:.8*t.height}}}),this.applyOptionsToConfig(e,i),[this.createEmitter(i)]}},snow:class SnowParticleEffect extends FXMasterParticleEffect{static label="FXMASTER.ParticleEffectSnow";static get icon(){return"modules/fxmaster/assets/particle-effects/icons/snow.png"}static get group(){return"weather"}static SNOW_CONFIG={lifetime:{min:4,max:4},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.9},{time:1,value:.5}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:190},{time:1,value:210}]},minMult:.6}},{type:"scale",config:{scale:{list:[{time:0,value:.2},{time:1,value:.4}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:0,maxSpeed:200,minStart:50,maxStart:75}},{type:"textureSingle",config:{texture:"ui/particles/snow.png"}}]};static get defaultConfig(){return this.SNOW_CONFIG}getParticleEmitters(e={}){e=this.constructor.mergeWithDefaults(e);const t=canvas.dimensions,a=t.width/t.size*(t.height/t.size)*e.density.value,i=foundry.utils.deepClone(this.constructor.SNOW_CONFIG);return i.maxParticles=a,i.frequency=(i.lifetime.min+i.lifetime.max)/2/a,i.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:0,y:-.1*t.height,w:t.width,h:t.height}}}),this.applyOptionsToConfig(e,i),[this.createEmitter(i)]}},snowstorm:SnowstormParticleEffect},specialEffects:{fxmaster:{label:"FXMaster",effects:[{label:"Smoke Bomb",file:"modules/fxmaster/assets/special-effects/fxmaster/smoke-bomb.webm",scale:{x:1,y:1},angle:0,anchor:{x:.5,y:.5},speed:0,author:"U~man"},{label:"Fireball",file:"modules/fxmaster/assets/special-effects/fxmaster/fireball.webm",scale:{x:1,y:1},angle:0,anchor:{x:.5,y:.5},author:"U~man"},{label:"Blood Splatter",file:"modules/fxmaster/assets/special-effects/fxmaster/blood.webm",scale:{x:.7,y:.7},angle:0,anchor:{x:.5,y:.5},author:"U~man"},{label:"Red Fire Cone",file:"modules/fxmaster/assets/special-effects/jinker/dragonBornGold-RedFire15Cone.webm",scale:{x:1,y:1},angle:0,anchor:{x:0,y:.5},author:"Jinker"},{label:"Acid Line",file:"modules/fxmaster/assets/special-effects/jinker/dragonBornBlack-CopperAcid30x5Line.webm",scale:{x:1,y:1},angle:0,anchor:{x:0,y:.5},author:"Jinker"},{label:"Witch Bolt",file:"modules/fxmaster/assets/special-effects/jb2a/Witch_Bolt_Blue_600x200.webm",scale:{x:.7,y:.7},angle:0,anchor:{x:0,y:.5},author:"JB2A"}]}}};class ParticleEffectsLayer extends(FullCanvasObjectMixin(CanvasLayer)){constructor(){super(),this.#e(),this.mask=canvas.masks.scene,this.sortableChildren=!0,this.eventMode="none"}#e(){this.occlusionFilter=WeatherOcclusionMaskFilter.create({occlusionTexture:canvas.masks.depth.renderTexture}),this.occlusionFilter.enabled=!1,this.occlusionFilter.elevation=this.elevation,this.occlusionFilter.blendMode=PIXI.BLEND_MODES.NORMAL,this.filterArea=canvas.app.renderer.screen,this.filters=[this.occlusionFilter]}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"particle-effects"})}particleEffects=new Map;occlusionFilter;get elevation(){return canvas.weather?.elevation??1/0}set elevation(e){const t=canvas.weather;t&&(t.elevation=e)}async _draw(){isEnabled()&&(isOnTargetMigration()?await this.#t():executeWhenWorldIsMigratedToLatest(this.#t.bind(this)))}async _tearDown(){return this.#a(),super._tearDown()}#a(){if(0!==this.particleEffects.size){for(const e of this.particleEffects.values())e.destroy();this.particleEffects.clear()}}async#t(){await this.drawParticleEffects()}async drawParticleEffects({soft:t=!1}={}){if(!canvas.scene)return;let a=0;const s=Promise.all([...this.particleEffects.entries()].map((async([e,a])=>{t?await a.fadeOut({timeout:2e4}):a.stop(),a.destroy(),this.particleEffects.get(e)===a&&this.particleEffects.delete(e)}))),n=canvas.scene.getFlag(e,"effects")??{};Object.keys(n).length>0&&(this.occlusionFilter.enabled=!0);for(const[e,{type:s,options:r}]of Object.entries(n)){if(!(s in CONFIG.fxmaster.particleEffects)){i.warn(`Particle effect '${e}' is of unknown type '${n[e].type}', skipping it.`);continue}const c=Object.fromEntries(Object.entries(r).map((([e,t])=>[e,{value:t}]))),o=new CONFIG.fxmaster.particleEffects[s](c);o.zIndex=a++,o.blendMode=PIXI.BLEND_MODES.NORMAL,this.addChild(o),this.particleEffects.set(e,o),o.play({prewarm:!t})}await s,0===this.particleEffects.size&&(this.occlusionFilter.enabled=!1)}}function drawDrawingsMaskIfCurrentScene(e){e===canvas.scene&&drawDrawingsMask()}function drawDrawingsMask(){const t=canvas.masks.depth;t.fxmasterDrawingsMask&&(t.removeChild(t.fxmasterDrawingsMask),delete t.fxmasterDrawingsMask);const a=canvas.scene.getFlag(e,"invert")?function createInvertedMask(){const t=new PIXI.LegacyGraphics;return t.beginFill(255).drawShape(canvas.dimensions.rect).endFill(),canvas.drawings.placeables.forEach((a=>{a.document.getFlag(e,"masking")&&(t.beginHole(),drawShapeToMask(t,a),t.endHole())})),t}():function createMask(){const t=new PIXI.LegacyGraphics;return canvas.drawings.placeables.forEach((a=>{a.document.getFlag(e,"masking")&&(t.beginFill(255),drawShapeToMask(t,a),t.endFill())})),t}();a.mask=new PIXI.MaskData,a.mask.colorMask=PIXI.COLOR_MASK_BITS.BLUE,t.fxmasterDrawingsMask=t.addChild(a)}function drawShapeToMask(e,t){const a=t.shape.geometry.graphicsData[0].shape.clone();switch(t.type){case Drawing.SHAPE_TYPES.ELLIPSE:a.x=t.center.x,a.y=t.center.y,e.drawShape(a);break;case Drawing.SHAPE_TYPES.POLYGON:{const a=t.document.shape.points.map(((e,a)=>a%2==0?e+t.bounds.x:e+t.bounds.y));e.drawPolygon(a);break}default:{const i=t.document.shape;a.x=t.center.x-i.width/2,a.y=t.center.y-i.height/2,e.drawShape(a)}}}class FilterManager{constructor(){this.filters={},this._ticker=!1,this.#i()}static#s;static get container(){return canvas.environment}static get instance(){return this.#s||(this.#s=new this),this.#s}async#n(){await this.#r({skipFading:!0}),this._ticker||(canvas.app.ticker.add(this.#c,this),this._ticker=!0)}async#r({skipFading:t=!1}={}){if(!canvas.scene)return;const a=Object.fromEntries(Object.entries(canvas.scene.getFlag(e,"filters")??{}).filter((([e,t])=>t.type in CONFIG.fxmaster.filterEffects||(i.warn(`Filter effect '${e}' is of unknown type '${t.type}', skipping it.`),!1)))),s=Object.keys(a).filter((e=>!(e in this.filters))),n=Object.keys(a).filter((e=>e in this.filters)),r=Object.keys(this.filters).filter((e=>!(e in a)));for(const e of s){const{type:i,options:s}=a[e];this.filters[e]=new CONFIG.fxmaster.filterEffects[i](s,e),this.filters[e].play({skipFading:t})}for(const e of n){const{options:i}=a[e],s=this.filters[e];s.configure(i),s.play({skipFading:t})}const c=r.map((async e=>{const a=this.filters[e];await a.stop({skipFading:t})&&(delete this.filters[e],FilterManager.#o(this.constructor.container,a))}));await Promise.all(c),this.#l()}#l(){const e=Object.values(this.filters),t=this.constructor.container.filters?.filter((t=>!e.includes(t)))??[];this.constructor.container.filters=t.concat(e)}static#o(e,t){e.filters=e.filters?.filter((e=>e!==t))??null}async#f(){const e=Object.values(this.filters).map((e=>e.stop()));this.filters={},await Promise.all(e)}async addFilter(t,a,i){t=t??foundry.utils.randomID(),await(canvas.scene?.setFlag(e,"filters",{[t]:{type:a,options:i}}))}async removeFilter(t){await(canvas.scene?.setFlag(e,"filters",{[`-=${t}`]:null}))}async removeAll(){await(canvas.scene?.unsetFlag(e,"filters"))}async switch(t,a,i){if(!canvas.scene)return;return(canvas.scene.getFlag(e,"filters")??{})[t]?this.removeFilter(t):this.addFilter(t,a,i)}async setFilters(e){const t=Object.fromEntries(e.map((e=>[foundry.utils.randomID(),e])));await resetFlag(canvas.scene,"filters",t)}#c(){for(const e in this.filters)this.filters[e].step()}#i(){Hooks.on("canvasInit",(()=>{isEnabled()&&this.#f()})),Hooks.on("canvasReady",(()=>{executeWhenWorldIsMigratedToLatest((async()=>{isEnabled()&&await this.#n()}))})),Hooks.on("updateScene",((e,t)=>{isEnabled()&&isOnTargetMigration()&&e===canvas.scene&&(foundry.utils.hasProperty(t,"flags.fxmaster.filters")||foundry.utils.hasProperty(t,"flags.fxmaster.-=filters"))&&this.#r()}))}}class SpecialEffectConfig extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["form"],closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:320,height:"auto",template:"modules/fxmaster/templates/special-effect-config.hbs",id:"add-effect",title:game.i18n.localize("FXMASTER.AddSpecialEffect")})}setDefault(e){this.default=e}getData(){const e=u;return{default:foundry.utils.mergeObject({folder:"Custom",angle:0,position:{x:0,y:0},anchor:{x:.5,y:.5},scale:{x:1,y:1},speed:0,animationDelay:{start:0,end:0},ease:"Linear",author:"",preset:!1},this.default),ease:Object.keys(e)}}activateListeners(e){super.activateListeners(e),e.find('input[type="range"]').on("input",(e=>this._onChangeRange(e)))}async _updateObject(t,a){const i=game.settings.get(e,"specialEffects"),s={folder:a.folder,label:a.label,file:a.file,scale:{x:parseFloat(a.scaleX),y:parseFloat(a.scaleY)},angle:parseFloat(a.angle),anchor:{x:a.anchorX,y:a.anchorY},speed:parseFloat(a.speed),animationDelay:{start:parseFloat(a.animationDelayStart),end:parseFloat(a.animationDelayEnd)},ease:a.ease,preset:!1,author:""},n=i.filter((e=>e.label==s.label));n.length>0?n[0]=foundry.utils.mergeObject(n[0],s):i.push(s),await game.settings.set(e,"specialEffects",i)}}class SpecialEffectsManagement extends Application{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["fxmaster","specials","sidebar-popout"],closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:120,height:200,resizable:!0,dragDrop:[{dragSelector:".special-effects"}],template:"modules/fxmaster/templates/special-effects-management.hbs",id:"specials-config",title:game.i18n.localize("FXMASTER.SpecialEffectsManagementTitle")})}getData(){return{folders:CONFIG.fxmaster.userSpecials}}activateListeners(t){t.find(".special-effects .description").click((e=>{let t=e.currentTarget.closest(".directory-list"),a=$(t).find(".directory-item");for(let e=0;e<a.length;e++)a[e].classList.remove("active");e.currentTarget.parentElement.classList.add("active")})),t.find("a[data-action=add-effect]").click((async()=>{(new SpecialEffectConfig).render(!0)})),t.find(".preview video").hover((e=>{e.currentTarget.play()})),t.find(".del-effect").click((t=>{const a=t.currentTarget.closest(".folder").dataset.folderId,i=t.currentTarget.closest(".special-effects").dataset.effectId,s=CONFIG.fxmaster.userSpecials[a].effects[i],n=game.settings.get(e,"specialEffects"),r=n.findIndex((e=>e.label===s.label&&e.folder===s.folder));-1!==r&&(n.splice(r,1),game.settings.set(e,"specialEffects",n))})),t.find(".edit-effect").click((e=>{const t=e.currentTarget.closest(".folder").dataset.folderId,a=e.currentTarget.closest(".special-effects").dataset.effectId,i=new SpecialEffectConfig;i.setDefault(CONFIG.fxmaster.userSpecials[t].effects[a]),i.render(!0)})),t.find(".action-toggle").click((e=>{for(const t of e.currentTarget.parentElement.children)t.classList.remove("active");e.currentTarget.classList.add("active")}));t.find(".directory-list").on("click",".folder-header",this._toggleFolder.bind(this))}_toggleFolder(e){let t=$(e.currentTarget.parentElement);t.hasClass("collapsed")?t.removeClass("collapsed"):(t.addClass("collapsed"),t.find(".folder").addClass("collapsed"))}_onDragStart(e){const t=e.currentTarget.closest(".special-effects").dataset.effectId,a=e.currentTarget.closest(".folder").dataset.folderId,i=CONFIG.fxmaster.userSpecials[a].effects[t];i.type="SpecialEffect",e.dataTransfer.setData("text/plain",JSON.stringify(i))}}class SpecialEffectMesh extends SpriteMesh{get elevation(){return this.#m}set elevation(e){this.#m=e}#m=0}class SpecialEffectsLayer extends InteractionLayer{constructor(){super(),this.videos=[],this._dragging=!1,this.ruler=null,this.windowVisible=!1,game.socket.on(`module.${e}`,(e=>{this.playVideo(e)}))}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"specials",zIndex:245})}async _draw(){await super._draw(),this.ruler=this.addChild(new PIXI.Graphics)}async _tearDown(){this.ruler=null;for(const e of this.videos)e.remove();return this.videos=[],super._tearDown()}_configureProjectile(t,a){!a.distance||a.speed&&"auto"!=a.speed||(a.speed=a.distance/a.duration);const i=a.duration*a.speed,s=i*Math.cos(a.rotation),n=i*Math.sin(a.rotation),r=[{parent:t,attribute:"x",to:a.position.x+s},{parent:t,attribute:"y",to:a.position.y+n}];let c=1e3*a.duration;foundry.utils.hasProperty(a,"animationDelay")&&(c-=Math.max(0,1e3*(a.animationDelay.end+a.animationDelay.start)));const o=`${e}.video.${randomID()}.move`,animate=function(){CanvasAnimation.animate(r,{name:o,context:this,duration:c,easing:u[a.ease]})};return foundry.utils.hasProperty(a,"animationDelay.start")?setTimeout(animate,1e3*a.animationDelay.start):animate(),()=>CanvasAnimation.terminateAnimation(o)}_configureRotate(t,a){const i=[{parent:t,attribute:"angle",to:90*a.rotationSpeed}];let s=1e3*a.duration;foundry.utils.hasProperty(a,"animationDelay")&&(s-=Math.max(0,1e3*(a.animationDelay.end+a.animationDelay.start)));const n=`${e}.video.${randomID()}.rotate`,animate=function(){CanvasAnimation.animate(i,{name:n,context:this,duration:s,easing:u[a.ease]})};return foundry.utils.hasProperty(a,"animationDelay.start")?setTimeout(animate,1e3*a.animationDelay.start):animate(),()=>CanvasAnimation.terminateAnimation(n)}#u(e,t){if(e.anchor.set(t.anchor.x,t.anchor.y),e.rotation=Math.normalizeRadians(t.rotation-Math.toRadians(t.angle)),e.scale.set(t.scale.x,t.scale.y),e.position.set(t.position.x,t.position.y),e.elevation=t.elevation??1,t.width){if(t.keepAspect){const a=e.height/e.width;e.height=t.width*a}e.width=t.width}let a,i;return(t.speed||t.distance)&&(a=this._configureProjectile(e,t)),t.rotationSpeed&&(i=this._configureRotate(e,t)),()=>{a?.(),i?.()}}playVideo(e){return new Promise((t=>{e=foundry.utils.mergeObject({anchor:{x:.5,y:.5},rotation:0,scale:{x:1,y:1},position:{x:0,y:0},playbackRate:1,ease:"Linear"},e);const a=document.createElement("video");let i,s;a.preload="auto",a.crossOrigin="anonymous",a.src=e.file,a.playbackRate=e.playbackRate,this.videos.push(a);const onEnd=()=>{s?.(),canvas.primary.removeChild(i),canvas.primary.videoMeshes.delete(i),t(),i?._destroyed||i?.destroy({children:!0})};a.oncanplay=()=>{i=new SpecialEffectMesh(PIXI.Texture.from(a)),e.dimensions={w:a.videoWidth,h:a.videoHeight},e.duration=a.duration,s=this.#u(i,e),canvas.primary.addChild(i),canvas.primary.videoMeshes.add(i)},a.onerror=onEnd,a.onended=onEnd}))}static _createMacro(t){return`\n      const data = {\n        file: "${t.file}",\n        position: {\n          x: canvas.scene.dimensions.width / 2,\n          y: canvas.scene.dimensions.height / 2\n        },\n        anchor : {\n          x: ${t.anchor.x},\n          y: ${t.anchor.y}\n        },\n        angle: ${t.angle},\n        speed: ${t.speed},\n        scale: {\n          x: ${t.scale.x},\n          y: ${t.scale.y}\n        }\n      };\n      const tokens = canvas.tokens.controlled;\n      // No tokens are selected, play in a random position\n      if (tokens.length === 0) {\n        canvas.specials.playVideo(data);\n        game.socket.emit("module.${e}", data);\n        return;\n      }\n      const targets = game.user.targets;\n      if (targets.size !== 0) {\n        tokens.forEach(t1 => {\n          targets.forEach(t2 => {\n            canvas.specials.drawFacing(data, t1, t2);\n          })\n        })\n        return;\n      }\n      // Play effect on each token\n      tokens.forEach(t => {\n        data.position = {\n          x: t.position.x + t.w / 2,\n          y: t.position.y + t.h / 2\n        };\n        canvas.specials.playVideo(data);\n        game.socket.emit("module.${e}", data);\n      })\n\n    `}drawSpecialToward(t,a,i){const s={x:a.position.x+a.w/2,y:a.position.y+a.h/2},n=foundry.utils.mergeObject(t,{position:{x:s.x,y:s.y}}),r={x:i.position.x+i.w/2,y:i.position.y+i.h/2},c=new Ray(s,r);return n.distance=c.distance,n.rotation=c.angle,game.socket.emit(`module.${e}`,n),this.playVideo(n)}drawFacing(t,a,i){const s={x:a.position.x+a.w/2,y:a.position.y+a.h/2},n=foundry.utils.mergeObject(t,{position:{x:s.x,y:s.y}}),r={x:i.position.x+i.w/2,y:i.position.y+i.h/2},c=new Ray(s,r);return n.rotation=c.angle,game.socket.emit(`module.${e}`,n),this.playVideo(n)}_drawSpecial(t,a){t.stopPropagation();const i=Object.values(ui.windows).find((e=>"specials-config"==e.id));if(!i)return;const s=i.element.find(".special-effects.active");if(0==s.length)return;const n=s[0].dataset.effectId,r=s[0].closest(".folder").dataset.folderId,c=CONFIG.fxmaster.userSpecials[r].effects[n],o=foundry.utils.deepClone(c),{x:l,y:f}=t.interactionData.origin??a,m={...o,position:{x:l,y:f},rotation:t.interactionData.rotation,elevation:this.#m};if(!t.interactionData.destination)return game.socket.emit(`module.${e}`,m),this.playVideo(m);const u=i.element.find(".action-toggle.active a")[0].dataset.action,p=new Ray(t.interactionData.origin,t.interactionData.destination);switch(u){case"cast-throw":m.distance=p.distance,m.speed="auto";break;case"cast-extend":m.width=p.distance||m.width,m.speed=0;break;case"cast-expand":m.width=p.distance||m.width,m.keepAspect=!0,m.speed=0;break;case"cast-rotate":m.rotationSpeed=p.distance/canvas.grid.w,m.speed=0}return game.socket.emit(`module.${e}`,m),this.playVideo(m)}_onDragLeftDrop(e){const t={x:e.interactionData.destination.x-e.interactionData.origin.x,y:e.interactionData.destination.y-e.interactionData.origin.y},a=t.x/Math.hypot(t.x,t.y);e.interactionData.rotation=t.y>0?Math.acos(a):-Math.acos(a),this._drawSpecial(e),this.ruler.clear()}_onDragLeftStart(){this.windowVisible=this._isWindowVisible(),this.windowVisible&&(this._dragging=!0)}_onDragLeftMove(e){if(!this.windowVisible)return;const t=new Ray(e.interactionData.origin,e.interactionData.destination);this.ruler.clear(),this.ruler.lineStyle(3,11141171,.6).drawCircle(t.A.x,t.A.y,2).moveTo(t.A.x,t.A.y).lineTo(t.B.x,t.B.y).drawCircle(t.B.x,t.B.y,2)}_isWindowVisible(){return!!Object.values(ui.windows).find((e=>"specials-config"==e.id))}_onClickLeft(e){this._dragging=!1;const t=e.interactionData.origin;setTimeout((()=>{this._dragging||(e.interactionData.rotation=0,e.interactionData.destination=void 0,this._drawSpecial(e,t)),this._dragging=!1}),400)}get#m(){const e=Object.values(ui.windows).find((e=>"specials-config"==e.id)),t=e?.element.find("input[name='elevation']").val(),a=Number.parseFloat(t);return Number.isNaN(a)||!Number.isFinite(a)?1:a}}class FXMasterBaseForm extends FormApplication{activateListeners(e){super.activateListeners(e),e.find(".fxmaster-groups-list__collapse").click((e=>this._onClickCollapse(e,"fxmaster-groups-list__item","fxmaster-groups-list__collapsible","fxmaster-groups-list__collapse-icon"))),e.find(".fxmaster-list__collapse").click((e=>this._onClickCollapse(e,"fxmaster-list__item","fxmaster-list__collapsible","fxmaster-list__collapse-icon"))),e.find(".fxmaster-range-input").on("input",this._onChangeRange.bind(this))}_onClickCollapse(e,t,a,i){const s=$(e.currentTarget).parents(`.${t}`),n=s.children(`.${a}`),r=void 0!==i?s.find(`.${i}`):void 0;this._collapse(n,r,`${a}--collapsed`)}_collapse(e,t,a="collapsed",i=250){!e.hasClass(a)?e.slideUp(i,(()=>{e.addClass(a),t?.removeClass("fa-angle-down").addClass("fa-angle-up")})):e.slideDown(i,(()=>{e.removeClass(a),t?.removeClass("fa-angle-up").addClass("fa-angle-down")}))}async _onChangeInput(...e){return this.element.find('button[type="submit"]').prop("disabled",!1),super._onChangeInput(...e)}async _onSubmit(...e){return this.element.find('button[type="submit"]').prop("disabled",!0),super._onSubmit(...e)}}class ParticleEffectsManagement extends FXMasterBaseForm{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["form","fxmaster","particle-effects","sidebar-popout"],closeOnSubmit:!1,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:300,height:"auto",template:"modules/fxmaster/templates/particle-effects-management.hbs",id:"effects-config",title:game.i18n.localize("FXMASTER.ParticleEffectsManagementTitle")})}getData(){const t=canvas.scene?.getFlag(e,"effects")??{},a=Object.fromEntries(Object.values(t).map((e=>[e.type,e.options]))),{particleEffects:i}=CONFIG.fxmaster;return{particleEffectGroups:Object.entries(i).sort((([,e],[,t])=>e.group.localeCompare(t.group)||e.label.localeCompare(t.label))).reduce(((e,[t,i])=>{const s=i.group;return{...e,[s]:{label:`FXMASTER.ParticleEffectsGroup${s.titleCase()}`,expanded:e[s]?.expanded||Object.keys(a).includes(t),effects:{...e[s]?.effects,[t]:i}}}}),{}),effects:i,activeEffects:a}}async _updateObject(e,t){const{particleEffects:a}=CONFIG.fxmaster,i=Object.fromEntries(Object.entries(a).filter((([e])=>!!t[e])).map((([e,a])=>{const i=a.label;return[`core_${e}`,{type:e,options:Object.fromEntries(Object.entries(a.parameters).map((([e,a])=>[e,"color"===a.type?{apply:t[`${i}_${e}_apply`],value:t[`${i}_${e}`]}:t[`${i}_${e}`]])))}]})));resetFlag(canvas.scene,"effects",i)}}class FilterEffectsManagementConfig extends FXMasterBaseForm{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["form","fxmaster","filters","sidebar-popout"],closeOnSubmit:!1,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:300,height:"auto",template:"modules/fxmaster/templates/filter-effects-management.hbs",id:"filters-config",title:game.i18n.localize("FXMASTER.FilterEffectsManagementTitle")})}getData(){const t=canvas.scene?.getFlag(e,"filters")??{},a=Object.fromEntries(Object.values(t).map((e=>[e.type,e.options])));return{filters:Object.fromEntries(Object.entries(CONFIG.fxmaster.filterEffects).sort((([,e],[,t])=>e.label.localeCompare(t.label)))),activeFilters:a}}async _updateObject(e,t){if(!canvas.scene)return;const a=CONFIG.fxmaster.filterEffects,i=Object.fromEntries(Object.entries(a).filter((([e])=>!!t[e])).map((([e,a])=>{const i=a.label;return[`core_${e}`,{type:e,options:Object.fromEntries(Object.entries(a.parameters).map((([e,a])=>[e,"color"===a.type?{apply:t[`${i}_${e}_apply`],value:t[`${i}_${e}`]}:t[`${i}_${e}`]])))}]})));resetFlag(canvas.scene,"filters",i)}}const g="icons/svg/windmill.svg";async function saveParticleAndFilterEffectsAsMacro(){const t=canvas.scene?.getFlag(e,"effects")??{},a=Object.values(t),s=canvas.scene?.getFlag(e,"filters")??{},n=Object.values(s),{name:r,img:c}=function getMacroNameAndImg(e,t){const a=e.flatMap((({type:e})=>{const t=CONFIG.fxmaster.particleEffects[e];return t?[{label:game.i18n.localize(t.label),icon:t.icon}]:(i.warn(`Encountered unknown particle effect type '${e}' during macro creation, skipping it.`),[])})),s=t.flatMap((({type:e})=>{const t=CONFIG.fxmaster.filterEffects[e];return t?[{label:game.i18n.localize(t.label)}]:(i.warn(`Encountered unknown filter effect type '${e}' during macro creation, skipping it.`),[])}));return 0===s.length?1===a.length?{name:`Particle Effect: ${a[0].label}`,img:a[0].icon}:{name:"Particle Effects",img:g}:0===a.length?1===s.length?{name:`Filter Effect: ${s[0].label}`,img:g}:{name:"Filter Effects",img:g}:{name:"Particle & Filter Effects",img:g}}(a,n),o=[];a.length>0&&o.push(`Hooks.call('${e}.updateParticleEffects', ${JSON.stringify(a)});`),n.length>0&&o.push(`FXMASTER.filters.setFilters(${JSON.stringify(n)});`);const l=o.join("\n");await Macro.create({type:"script",name:r,command:l,img:c}),ui.notifications.info(`Macro '${r}' has been saved in the macro directory`)}function getSceneControlButtons(t){null!=canvas&&t.push({name:"effects",title:"CONTROLS.Effects",icon:"fas fa-wand-magic-sparkles",layer:"specials",visible:game.user.role>=game.settings.get(e,"permission-create"),tools:[{name:"specials",title:"CONTROLS.SpecialFX",icon:"fas fa-hat-wizard",onClick:()=>{(new SpecialEffectsManagement).render(!0)},button:!0},{name:"particle-effects",title:"CONTROLS.ParticleEffects",icon:"fas fa-cloud-rain",onClick:()=>{(new ParticleEffectsManagement).render(!0)},visible:game.user.isGM,button:!0},{name:"invertmask",title:"CONTROLS.InvertMask",icon:"fas fa-mask",onClick:()=>{if(canvas.scene){const t=canvas.scene.getFlag(e,"invert")??!1;canvas.scene.setFlag(e,"invert",!t)}},visible:game.user.isGM,active:canvas.scene?.getFlag(e,"invert")??!1,toggle:!0},{name:"filters",title:"CONTROLS.Filters",icon:"fas fa-filter",onClick:()=>{(new FilterEffectsManagementConfig).render(!0)},visible:game.user.isGM,button:!0},{name:"save",title:"CONTROLS.SaveMacro",icon:"fas fa-floppy-disk",onClick:saveParticleAndFilterEffectsAsMacro,visible:game.user.isGM,button:!0},{name:"clearfx",title:"CONTROLS.ClearFX",icon:"fas fa-trash",onClick:()=>{Dialog.confirm({title:game.i18n.localize("FXMASTER.ClearParticleAndFilterEffectsTitle"),content:game.i18n.localize("FXMASTER.ClearParticleAndFilterEffectsContent"),yes:()=>{canvas.scene&&(FilterManager.instance.removeAll(),canvas.scene.unsetFlag(e,"effects"))},defaultYes:!0})},visible:game.user.isGM,button:!0}],activeTool:"effect"})}function parseSpecialEffects(){const e=game.settings.get("fxmaster","specialEffects"),t=foundry.utils.deepClone(CONFIG.fxmaster.specialEffects);e.reduce(((e,t)=>{t.folder||(t.folder="Custom");const a=t.folder.toLowerCase().replace(/ /g,"");return e[a]||(e[a]={label:t.folder,effects:[]}),e[a].effects.push(t),e}),t),Object.keys(t).forEach((e=>{t[e].effects.sort(((e,t)=>(""+e.label).localeCompare(t.label)))})),CONFIG.fxmaster.userSpecials=t}window.FXMASTER={filters:FilterManager.instance,migration:f},Hooks.once("init",(function(){!function registerSettings(){game.settings.register(e,"enable",{name:"FXMASTER.Enable",default:!0,scope:"client",type:Boolean,config:!0,requiresReload:!0}),game.settings.register(e,"specialEffects",{name:"specialEffects",default:[],scope:"world",type:Array,config:!1}),game.settings.register(e,"migration",{name:"migration",default:-1,scope:"world",type:Number,config:!1,onChange:onWorldMigrated}),game.settings.register(e,"clientMigration",{name:"clientMigration",default:-1,scope:"client",type:Number,config:!1}),game.settings.register(e,"permission-create",{name:"FXMASTER.PermissionCreate",hint:"FXMASTER.PermissionCreateHint",scope:"world",config:!0,default:foundry.CONST.USER_ROLES.ASSISTANT,type:Number,choices:{[foundry.CONST.USER_ROLES.PLAYER]:"USER.RolePlayer",[foundry.CONST.USER_ROLES.TRUSTED]:"USER.RoleTrusted",[foundry.CONST.USER_ROLES.ASSISTANT]:"USER.RoleAssistant",[foundry.CONST.USER_ROLES.GAMEMASTER]:"USER.RoleGamemaster"},requiresReload:!0}),game.settings.register(e,"disableAll",{name:"FXMASTER.DisableAll",hint:"FXMASTER.DisableAllHint",default:!1,scope:"world",type:Boolean,config:!0})}(),registerHooks(),function registerLayers(){CONFIG.Canvas.layers.fxmaster={layerClass:ParticleEffectsLayer,group:"primary"},CONFIG.Canvas.layers.specials={layerClass:SpecialEffectsLayer,group:"interface"}}(),function registerHandlebarsHelpers(){Handlebars.registerHelper("fxmasterParameter",((e,t,a,i={})=>{const s=i[a]??e.default[a];switch(t.type){case"color":return`\n              <input type="checkbox" name="${e.label}_${a}_apply" ${s.apply?"checked":""}/>\n              <input type="color" name="${e.label}_${a}" value="${s.value}">\n              `;case"range":return`\n              <input class="fxmaster-range-input" type="range" step="${t.step}" min="${t.min}" max="${t.max}" name="${e.label}_${a}" value="${s}">\n              <span class="range-value">${s}</span>\n              `;case"number":return`\n              <input class="fxmaster-text-input" type="text" data-dtype="Number" name="${e.label}_${a}" value="${s}">\n              `;case"multi-select":return`<select class="fxmaster-multi-select" multiple name="${e.label}_${a}">${Object.entries(t.options).map((([e,t])=>`<option class="fxmaster-multi-select__option" value="${e}"${s.includes(e)?" selected":""}>${game.i18n.localize(t)}</option>`))}</select>`}return""}))}(),CONFIG.fxmaster||(CONFIG.fxmaster={});const t={weather:"particleEffects",filters:"filterEffects",specials:"specialEffects"},getConfigDeprecationMessage=(e,t)=>format(`CONFIG#fxmaster#${e} is deprecated in favor of CONFIG#fxmaster#${t}'`);for(const[e,a]of Object.entries(t))if(CONFIG.fxmaster[e]){CONFIG.fxmaster[a]=CONFIG.fxmaster[e],delete CONFIG.fxmaster[e];const t=getConfigDeprecationMessage(e,a);foundry.utils.logCompatibilityWarning(t,{mod:foundry.CONST.COMPATIBILITY_MODES.WARNING,since:"FXMaster v3.0.0",until:"FXMaster v4.0.0",stack:!1})}foundry.utils.mergeObject(CONFIG.fxmaster,{filterEffects:d.filterEffects,particleEffects:d.particleEffects,specialEffects:d.specialEffects});for(const[e,a]of Object.entries(t))Object.defineProperty(CONFIG.fxmaster,e,{get:()=>{const t=getConfigDeprecationMessage(e,a);return foundry.utils.logCompatibilityWarning(t,{mod:foundry.CONST.COMPATIBILITY_MODES.WARNING,since:"FXMaster v3.0.0",until:"FXMaster v4.0.0",stack:!1}),CONFIG.fxmaster[a]}});const a=Object.fromEntries(Object.entries(CONFIG.fxmaster.particleEffects).map((([e,t])=>[`fxmaster.${e}`,{id:`fxmaster.${e}`,label:`${t.label}WeatherEffectsConfig`,effects:[{id:`${e}Particles`,effectClass:t}]}])));CONFIG.originalWeatherEffects=CONFIG.weatherEffects,CONFIG.weatherEffects={...CONFIG.weatherEffects,...a}})),Hooks.once("ready",(()=>{migrate()})),Hooks.on("canvasInit",(()=>{isEnabled()&&parseSpecialEffects()})),Hooks.on("updateScene",((e,t)=>{isEnabled()&&isOnTargetMigration()&&e===canvas.scene&&(foundry.utils.hasProperty(t,"flags.fxmaster.effects")||foundry.utils.hasProperty(t,"flags.fxmaster.-=effects"))&&canvas.fxmaster.drawParticleEffects({soft:!0})})),Hooks.on("dropCanvasData",(async(e,t)=>{if(!(e.activeLayer instanceof SpecialEffectsLayer&&e.scene))return;if("SpecialEffect"!==t.type)return;await new Promise((e=>{const a=document.createElement("video");a.addEventListener("loadedmetadata",(()=>{t.width=a.videoWidth*t.scale.x,t.height=a.videoHeight*t.scale.y,e()}),!1),a.src=t.file}));const a={alpha:1,flags:{},height:t.height,hidden:!1,img:t.file,locked:!1,occlusion:{mode:1,alpha:0},overHead:!1,rotation:0,tileSize:100,video:{loop:!0,autoplay:!0,volume:0},width:t.width,x:t.x-t.anchor.x*t.width,y:t.y-t.anchor.y*t.height,z:100};ui.notifications.info(`A new Tile was created for effect ${t.label}`),e.scene.createEmbeddedDocuments("Tile",[a]).then((()=>{}))})),Hooks.on("hotbarDrop",((e,t)=>{if("SpecialEffect"!==t.type)return;const a=SpecialEffectsLayer._createMacro(t);t.type="Macro",t.data={command:a,name:t.label,type:"script",author:game.user.id}})),Hooks.on("updateSetting",(e=>{"fxmaster.specialEffects"===e.key&&(parseSpecialEffects(),Object.values(ui.windows).forEach((e=>{e instanceof SpecialEffectsManagement&&e.render(!1)})))})),Hooks.on("renderDrawingHUD",((e,t)=>{const a=document.createElement("div");a.classList.add("control-icon"),e.object.document.flags?.fxmaster?.masking&&a.classList.add("active"),a.setAttribute("title",game.i18n.localize("FXMASTER.MaskParticleEffects")),a.dataset.action="mask",a.innerHTML='<i class="fas fa-cloud"></i>',t.find(".col.left").append(a),t.find(".control-icon[data-action='mask']").on("click",(t=>{t.preventDefault();const a=e.object.document.flags?.fxmaster?.masking,i=e.layer.controlled.map((e=>({_id:e.id,"flags.fxmaster.masking":!a})));t.currentTarget.classList.toggle("active",!a),canvas.scene.updateEmbeddedDocuments(e.object.document.documentName,i)}))})),function registerGetSceneControlButtonsHook(){Hooks.on("getSceneControlButtons",getSceneControlButtons)}(),function registeDrawingsMaskFunctionality(){Hooks.on("canvasReady",drawDrawingsMask);for(const e of["updateDrawing","createDrawing","deleteDrawing"])Hooks.on(e,(e=>{drawDrawingsMaskIfCurrentScene(e.parent)}));Hooks.on("updateScene",((e,t)=>{(foundry.utils.hasProperty(t,"flags.fxmaster.invert")||foundry.utils.hasProperty(t,"flags.fxmaster.-=invert"))&&drawDrawingsMaskIfCurrentScene(e)}))}();
//# sourceMappingURL=fxmaster.js.map
