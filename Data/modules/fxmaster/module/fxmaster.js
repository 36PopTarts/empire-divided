const e="fxmaster";function getLoggingFunction(e="info"){const t=console[e];return(...e)=>t("FXMaster","|",...e)}const t=Object.freeze({debug:getLoggingFunction("debug"),info:getLoggingFunction("info"),warn:getLoggingFunction("warn"),error:getLoggingFunction("error"),getLoggingFunction}),resetFlags=function(t,s,a){const i=t.getFlag(e,s);return(i?Object.keys(i):[]).forEach((e=>{a[e]||(a[`-=${e}`]=null)})),t.setFlag(e,s,a)};function formatString(e,...t){return e.replace(/{(\d+)}/g,(function(e,s){return void 0!==t[s]?t[s]:e}))}function isV9OrLater(){return game.release?.generation??!1}function roundToDecimals(e,t){return Number(Math.round(e+"e"+t)+"e-"+t)}async function migrate(){await async function migrateClient(){const t=game.settings.get(e,"clientMigration");if(-1===t)return game.settings.set(e,"clientMigration",1);if(t<1){ui.notifications.info("FXMASTER.MigrationClientStart",{permanent:!0,localize:!0});let s=!1;if(0===t)s|=await async function migrateClient0to1(){const t=game.settings.get(e,"specialEffects");for(let e=0;e<t.length;++e)"object"!=typeof t[e].scale&&(t[e].scale={x:t[e].scale,y:t[e].scale});return await game.settings.set(e,"specialEffects",t),!1}();s?ui.notifications.error("FXMASTER.MigrationClientCompletedWithErrors",{localize:!0,permanent:!0}):ui.notifications.info("FXMASTER.MigrationClientCompletedSuccessfully",{localize:!0,permanent:!0}),await game.settings.set(e,"clientMigration",1)}}(),game.user.isGM&&await async function migrateWolrd(){const s=game.settings.get(e,"migration");if(-1===s)return game.settings.set(e,"migration",2);if(s<2){ui.notifications.info("FXMASTER.MigrationWorldStart",{localize:!0,permanent:!0});let a=!1;switch(s){case 0:case 1:a|=await async function migrateWorld1to2(){let s=!1;const migrateScene=async t=>{const s=t.getFlag(e,"effects")??{};if(Object.keys(s).length>0){const e=Object.fromEntries(Object.entries(s).map((([e,s])=>{const a=CONFIG.fxmaster.weather[s.type];return[e,{...s,options:a.convertOptionsToV2(s.options,t)}]})));await resetFlags(t,"effects",e)}};for(const e of game.scenes){t.debug(`Migrating Scene '${e.name}' (${e.id}).`);try{await migrateScene(e)}catch(a){t.error(`Migration of Scene '${e.name}' (${e.id}) failed.`,a),s=!0}}const migrateSceneCompendium=async e=>{if("Scene"!==(isV9OrLater()?e.metadata.type:e.metadata.entity))return;const a=e.locked;await e.configure({locked:!1}),await e.migrate();const i=await e.getDocuments();for(const a of i){t.debug(`Migrating Scene '${a.name}' (${a.id}) in compendium ${e.collection}.`);try{await migrateScene(a)}catch(i){t.error(`Migration of Scene '${a.name}' (${a.id}) in compendium ${e.collection} failed.`,i),s=!0}}await e.configure({locked:a})};for(const e of game.packs){const t=isV9OrLater()?e.metadata.type:e.metadata.entity;"world"===e.metadata.package&&"Scene"===t&&await migrateSceneCompendium(e)}return s}()}a?(await game.settings.set(e,"disableAll",!0),ui.notifications.error("FXMASTER.MigrationWorldCompletedWithErrors",{localize:!0,permanent:!0})):ui.notifications.info("FXMASTER.MigrationWorldCompletedSuccessfully",{localize:!0,permanent:!0}),await game.settings.set(e,"migration",2)}}()}function isOnTargetMigration(){return 2===game.settings.get(e,"migration")&&1===game.settings.get(e,"clientMigration")}function executeWhenWorldIsMigratedToLatest(t){2!==game.settings.get(e,"migration")?s.push(t):t()}const s=[];async function onWorldMigrated(){if(2===game.settings.get(e,"migration"))for(const e of s)await e()}const a=foundry.utils.debounce((()=>{window.location.reload()}),100);async function onSwitchWeather(t){if(!canvas.scene)return;const s={[t.name]:{type:t.type,options:t.options}};let a=await canvas.scene.getFlag(e,"effects")??{},i={};foundry.utils.hasProperty(a,t.name)?(i=a,delete i[t.name]):i=foundry.utils.mergeObject(a,s),0==Object.keys(i).length?await canvas.scene.unsetFlag(e,"effects"):resetFlags(canvas.scene,"effects",i)}async function onUpdateWeather(e){const t=Object.fromEntries(e.map((e=>[foundry.utils.randomID(),e])));resetFlags(canvas.scene,"effects",t)}const i="The '{0}' hook is deprecated and will be removed in a future version. Please use the 'fxmaster.{0}' hook instead. Be aware that the meaning of some options changed for the new hook. Consult the documentation for more details: https://github.com/ghost-fvtt/fxmaster/blob/v2.0.0/README.md#weather-effect-options. To get the same effect for this scene, the given parameters should look as follows for the new hook:";async function onSwitchWeatherDeprecated(e){const s=CONFIG.fxmaster.weather[e.type],a={...e,options:s.convertOptionsToV2(e.options,canvas.scene)};return t.warn(formatString(i,"switchWeather"),a),onSwitchWeather(a)}async function onUpdateWeatherDeprecated(e){const s=e.map((e=>{const t=CONFIG.fxmaster.weather[e.type];return{...e,options:t.convertOptionsToV2(e.options,canvas.scene)}}));return t.warn(formatString(i,"updateWeather"),s),onUpdateWeather(s)}class AbstractWeatherEffect extends SpecialEffect{static get parameters(){return{scale:{label:"FXMASTER.Scale",type:"range",min:.1,value:1,max:5,step:.1,decimals:1},direction:{label:"FXMASTER.Direction",type:"range",min:0,value:(this.CONFIG.startRotation.min+this.CONFIG.startRotation.max)/2,max:360,step:5,decimals:0},speed:{label:"FXMASTER.Speed",type:"range",min:.1,value:1,max:5,step:.1,decimals:1},lifetime:{label:"FXMASTER.Lifetime",type:"range",min:.1,value:1,max:5,step:.1,decimals:1},density:{label:"FXMASTER.Density",type:"range",min:.1,value:.5,max:5,step:.1,decimals:1},tint:{label:"FXMASTER.Tint",type:"color",value:{value:"#FFFFFF",apply:!1}}}}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}static get effectOptions(){const e={color:SpecialEffect.OPTION_TYPES.value,number:SpecialEffect.OPTION_TYPES.VALUE,range:SpecialEffect.OPTION_TYPES.RANGE};return Object.fromEntries(Object.entries(this.parameters).map((([t,s])=>[t,{...s,type:e[s.type]}])))}applyOptionsToConfig(e){this._applyScaleToConfig(e),this._applySpeedToConfig(e),this._applyDirectionToConfig(e),this._applyLifetimeToConfig(e),this._applyTintToConfig(e)}_applyFactorToBasicTweenableOrValueListOrRandNumber(e,t){"start"in e&&(e.start=e.start*t),"end"in e&&(e.end=e.end*t),"list"in e&&(e.list=e.list.map((e=>({...e,value:e.value*t})))),"min"in e&&(e.min=e.min*t),"max"in e&&(e.max=e.max*t)}_applyScaleToConfig(e){const t=e.scale??{},s=(this.options.scale?.value??1)*(canvas.dimensions.size/100);this._applyFactorToBasicTweenableOrValueListOrRandNumber(t,s)}_applySpeedToConfig(e){const t=(this.options.speed?.value??1)*(canvas.dimensions.size/100),s=e.speed??{};this._applyFactorToBasicTweenableOrValueListOrRandNumber(s,t);const a=e.lifetime??{};this._applyFactorToBasicTweenableOrValueListOrRandNumber(a,1/t),e.frequency/=t}_applyDirectionToConfig(e){const t=this.options.direction?.value,s=(e.startRotation?.max??0)-(e.startRotation?.min??0);void 0!==t&&(e.startRotation={min:t-s/2,max:t+s/2})}_applyLifetimeToConfig(e){const t=e.lifetime??{},s=this.options.lifetime?.value??1;this._applyFactorToBasicTweenableOrValueListOrRandNumber(t,s),e.frequency*=s}_applyTintToConfig(e){if(this.options.tint?.value.apply){const t=this.options.tint.value.value;e.color={list:[{value:t,time:0},{value:t,time:1}]}}}async fadeOut({timeout:e}={}){const t=this.emitters.map((e=>new Promise((t=>{e.emitterLifetime=.1,e.playOnceAndDestroy((()=>{t()}))})))),s=[Promise.all(t)];void 0!==e&&s.push(new Promise((t=>setTimeout(t,e)))),await Promise.race(s),this.stop()}static convertOptionsToV2(e,t){return Object.fromEntries(Object.entries(e).map((([e,s])=>{switch(e){case"scale":return[e,this._convertScaleToV2(s,t)];case"speed":return[e,this._convertSpeedToV2(s,t)];case"density":return[e,this._convertDensityToV2(s,t)];default:return[e,s]}})))}static _convertScaleToV2(e,t){const s=this.parameters.scale?.decimals??1;return roundToDecimals(e*(100/t.dimensions.size),s)}static _convertSpeedToV2(e,t){const s=this.CONFIG.speed?.list?.map((e=>e.value))??[];"start"in(this.CONFIG.speed??{})&&s.push(this.CONFIG.speed.start),"end"in(this.CONFIG.speed??{})&&s.push(this.CONFIG.speed.end);const a=Math.max(...s),i=this.parameters.speed?.decimals??1;return roundToDecimals(e/a*(100/t.dimensions.size),i)}static _convertDensityToV2(e,t){const s=t.dimensions;return roundToDecimals(e/(s.width/s.size*(s.height/s.size)),this.parameters.density?.decimals??1)}}class BubblesWeatherEffect extends AbstractWeatherEffect{static get label(){return"Bubbles"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/bubbles.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.01,value:.15,max:.5,step:.01,decimals:2},"-=direction":void 0})}getParticleEmitters(){return[this._getBubbleEmitter(this.parent)]}_getBubbleEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);return new PIXI.particles.Emitter(e,["modules/fxmaster/assets/weatherEffects/effects/bubbles.png"],a)}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:.85,time:.05},{value:.85,time:.98},{value:0,time:1}]},scale:{start:.25,end:.5,minimumScaleMultiplier:.5},speed:{start:20,end:60,minimumSpeedMultiplier:.6},color:{list:[{value:"ffffff",time:0},{value:"ffffff",time:1}]},startRotation:{min:0,max:360},rotationSpeed:{min:100,max:200},lifetime:{min:8,max:10},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class CloudsWeatherEffect extends AbstractWeatherEffect{static get label(){return"Clouds"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/fog.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.03,max:.2,step:.001,decimals:3}})}getParticleEmitters(){return[this._getCloudEmitter(this.parent)]}_getCloudEmitter(e){const t=canvas.dimensions,s=t.sceneRect.width/t.size*(t.sceneRect.height/t.size)*this.options.density.value,a=2/3,i=Math.sqrt(t.sceneRect.width*t.sceneRect.width+t.sceneRect.height*t.sceneRect.height)/((this.constructor.CONFIG.speed.start+this.constructor.CONFIG.speed.end)/2*(1+this.constructor.CONFIG.speed.minimumSpeedMultiplier)/2),r=i/a/2,n=i/a,o=Math.toRadians(this.options.direction.value),c=Math.cos(o),l=Math.sin(o),m=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x-c*t.sceneRect.width*a,y:t.sceneRect.y-l*t.sceneRect.height*a,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:(r+n)/2/s,lifetime:{min:r,max:n}},{inplace:!1});this.applyOptionsToConfig(m);return new PIXI.particles.Emitter(e,["modules/fxmaster/assets/weatherEffects/effects/cloud1.png","modules/fxmaster/assets/weatherEffects/effects/cloud2.png","modules/fxmaster/assets/weatherEffects/effects/cloud3.png","modules/fxmaster/assets/weatherEffects/effects/cloud4.png"],m)}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}],isStepped:!1},scale:{start:.8,end:.8,minimumScaleMultiplier:.1},speed:{start:100,end:100,minimumSpeedMultiplier:.3},color:{list:[{value:"ffffff",time:0},{value:"ffffff",time:1}]},startRotation:{min:80,max:100},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class EmbersWeatherEffect extends AbstractWeatherEffect{static get label(){return"Embers"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/embers.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.7,max:1.4,step:.05,decimals:2},tint:{value:{value:"#f77300"}},"-=direction":void 0})}getParticleEmitters(){return[this._getEmbersEmitter(this.parent)]}_getEmbersEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i=new PIXI.particles.Emitter(e,["modules/fxmaster/assets/weatherEffects/effects/ember.png"],a);return i.startColor=PIXI.particles.ParticleUtils.createSteppedGradient(a.color.list,!0),i}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:.9,time:.3},{value:.9,time:.95},{value:0,time:1}]},scale:{start:.15,end:.01,minimumScaleMultiplier:.85},speed:{start:40,end:40,minimumSpeedMultiplier:.6},color:{list:[{value:"f77300",time:0},{value:"f72100",time:1}]},startRotation:{min:0,max:360},rotationSpeed:{min:100,max:200},lifetime:{min:4,max:6},blendMode:"screen",emitterLifetime:-1},{inplace:!1})}class CrowsWeatherEffect extends AbstractWeatherEffect{static get label(){return"Crows"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/crows.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.006,max:.01,step:.001,decimals:3},"-=direction":void 0})}getParticleEmitters(){return[this._getCrowsEmitter(this.parent)]}_getCrowsEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i=new PIXI.particles.Emitter(e,{framerate:"15",textures:[{texture:"modules/fxmaster/assets/weatherEffects/effects/raven1.png",count:20},{texture:"modules/fxmaster/assets/weatherEffects/effects/raven2.png",count:3},{texture:"modules/fxmaster/assets/weatherEffects/effects/raven3.png",count:2},{texture:"modules/fxmaster/assets/weatherEffects/effects/raven4.png",count:2},{texture:"modules/fxmaster/assets/weatherEffects/effects/raven3.png",count:2},{texture:"modules/fxmaster/assets/weatherEffects/effects/raven2.png",count:3}],loop:!0},a);return i.particleConstructor=PIXI.particles.AnimatedParticle,i}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}],isStepped:!1},scale:{list:[{value:.03,time:0},{value:.12,time:.1},{value:.12,time:.9},{value:.03,time:1}],isStepped:!1},speed:{start:90,end:100,minimumSpeedMultiplier:.6},startRotation:{min:0,max:360},lifetime:{min:20,max:40},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class BatsWeatherEffect extends AbstractWeatherEffect{static get label(){return"Bats"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/bats.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.005,value:.05,max:.1,step:.005,decimals:3},"-=direction":void 0})}getParticleEmitters(){return[this._getBatsEmitter(this.parent)]}_getBatsEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i=new PIXI.particles.Emitter(e,{framerate:"30",textures:[{texture:"modules/fxmaster/assets/weatherEffects/effects/bat0.png",count:1},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat1.png",count:1},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat2.png",count:1},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat3.png",count:1},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat4.png",count:2},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat3.png",count:1},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat2.png",count:1},{texture:"modules/fxmaster/assets/weatherEffects/effects/bat1.png",count:1}],loop:!0},a);return i.particleConstructor=PIXI.particles.AnimatedParticle,i}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}],isStepped:!1},scale:{list:[{value:.02,time:0},{value:.1,time:.05},{value:.1,time:.95},{value:.02,time:1}],isStepped:!1},speed:{start:200,end:260,minimumSpeedMultiplier:.8},startRotation:{min:0,max:360},lifetime:{min:20,max:40},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class FogWeatherEffect extends AbstractWeatherEffect{static get label(){return"Fog"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/fog.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.01,value:.08,max:.15,step:.01,decimals:2},"-=direction":void 0})}getParticleEmitters(){return[this._getFogEmitter(this.parent)]}_getFogEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);return new PIXI.particles.Emitter(e,["modules/fxmaster/assets/weatherEffects/effects/cloud1.png","modules/fxmaster/assets/weatherEffects/effects/cloud2.png","modules/fxmaster/assets/weatherEffects/effects/cloud3.png","modules/fxmaster/assets/weatherEffects/effects/cloud4.png"],a)}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:.1,time:.1},{value:.3,time:.5},{value:.1,time:.9},{value:0,time:1}],isStepped:!1},scale:{start:1.5,end:1,minimumScaleMultiplier:.5},speed:{start:15,end:10,minimumSpeedMultiplier:.2},color:{list:[{value:"dddddd",time:0},{value:"dddddd",time:1}]},startRotation:{min:0,max:360},rotationSpeed:{min:.15,max:.35},lifetime:{min:10,max:25},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class RaintopWeatherEffect extends AbstractWeatherEffect{static get label(){return"Topdown Rain"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/rain.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.01,value:.3,max:1,step:.01,decimals:2},"-=direction":null})}getParticleEmitters(){return[this._getEmitter(this.parent)]}_getEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=Math.sqrt(t.sceneWidth*t.sceneWidth+t.sceneHeight*t.sceneHeight)/2,i=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnType:"ring",speed:{start:t.width/3,end:t.height/4,minimumSpeedMultiplier:.8},spawnCircle:{x:t.sceneRect.x+t.sceneWidth/2,y:t.sceneRect.y+t.sceneHeight/2,r:1.3*a,minR:a/2},maxParticles:s,frequency:1/s},{inplace:!1});this.applyOptionsToConfig(i);return new PIXI.particles.Emitter(e,["ui/particles/rain.png"],i)}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:.6,time:.1},{value:.23,time:1}],isStepped:!1},scale:{start:3,end:.4,minimumScaleMultiplier:.7},color:{start:"dddddd",end:"dddddd"},startRotation:{min:180,max:180},lifetime:{min:.3,max:.7},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class RainSimpleWeatherEffect extends AbstractWeatherEffect{static get label(){return"Rain without splash"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/rain.png"}getParticleEmitters(){return[this._getRainEmitter(this.parent)]}_getRainEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:-.05*t.width,y:-.1*t.height,w:t.width,h:.8*t.height},maxParticles:s,frequency:1/s},{inplace:!1});return this.applyOptionsToConfig(a),new PIXI.particles.Emitter(e,["ui/particles/rain.png"],a)}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{start:.7,end:.1},scale:{start:1,end:1,minimumScaleMultiplier:.8},speed:{start:3500,end:3500,minimumSpeedMultiplier:.8},startRotation:{min:75,max:75},lifetime:{min:.5,max:.5}},{inplace:!1})}class SnowstormWeatherEffect extends AbstractWeatherEffect{static get label(){return"Snowstorm"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/snow.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.6,max:1,step:.05,decimals:2}})}getParticleEmitters(){return[this._getSnowEmitter(this.parent)]}_getSnowEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:(this.constructor.CONFIG.lifetime.min+this.constructor.CONFIG.lifetime.max)/2/s},{inplace:!1});this.applyOptionsToConfig(a);const i=new PIXI.particles.Emitter(e,["modules/fxmaster/assets/weatherEffects/effects/snow_01.png","modules/fxmaster/assets/weatherEffects/effects/snow_02.png"],a);return i.particleConstructor=PIXI.particles.PathParticle,i}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{start:1,end:1},scale:{start:.2,end:.08,minimumScaleMultiplier:.8},speed:{start:400,end:350,minimumSpeedMultiplier:.2},startRotation:{min:86,max:94},rotationSpeed:{min:-60,max:60},lifetime:{min:2.5,max:6},extraData:{path:"sin(x/150)*25"}},{inplace:!1})}class BirdsWeatherEffect extends AbstractWeatherEffect{static get label(){return"Birds"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/crows.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.006,max:.01,step:.001,decimals:3},"-=direction":void 0,animations:{label:"FXMASTER.Animations",type:"multi-select",options:{glide:"FXMASTER.WeatherBirdsAnimationsGlide",flap:"FXMASTER.WeatherBirdsAnimationsFlap",mixed:"FXMASTER.WeatherBirdsAnimationsMixed"},value:["mixed"]}})}getParticleEmitters(){return[this._getEmitter(this.parent)]}_getEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i={glide:[{textureNumber:2,count:30},...Array(4).fill([{textureNumber:1,count:3},{textureNumber:2,count:2},{textureNumber:3,count:3},{textureNumber:2,count:2}]).deepFlatten(),{textureNumber:2,count:68}],flap:[{textureNumber:1,count:3},{textureNumber:2,count:2},{textureNumber:3,count:3},{textureNumber:2,count:2}],mixed:[{textureNumber:2,count:7},{textureNumber:1,count:3},{textureNumber:2,count:2},{textureNumber:3,count:3},{textureNumber:2,count:7}]},getAnim=(e,t)=>({framerate:20,loop:!0,textures:e.map((({textureNumber:e,count:s})=>({texture:formatString(t,e),count:s})))}),r="modules/fxmaster/assets/weatherEffects/effects/seagull_{0}.png",n=(this.options.animations?.value??[]).filter((e=>Object.keys(i).includes(e))).map((e=>getAnim(i[e],r)));0===n.length&&n.push(getAnim(i.mixed,r));const o=new PIXI.particles.Emitter(e,n,a);return o.particleConstructor=PIXI.particles.AnimatedParticle,o}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}],isStepped:!1},scale:{list:[{value:.3,time:0},{value:.7,time:.1},{value:.7,time:.9},{value:.3,time:1}],isStepped:!1},speed:{start:90,end:100,minimumSpeedMultiplier:.6},startRotation:{min:0,max:360},lifetime:{min:20,max:40},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class StarsWeatherEffect extends AbstractWeatherEffect{static get label(){return"Stars"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/stars.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.3,max:1,step:.05,decimals:2},tint:{value:{value:"#bee8ee"}},"-=direction":void 0})}getParticleEmitters(){return[this._getEmitter(this.parent)]}_getEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i=new PIXI.particles.Emitter(e,["modules/fxmaster/assets/weatherEffects/effects/star_01.png","modules/fxmaster/assets/weatherEffects/effects/star_02.png","modules/fxmaster/assets/weatherEffects/effects/star_04.png","modules/fxmaster/assets/weatherEffects/effects/star_05.png","modules/fxmaster/assets/weatherEffects/effects/star_06.png","modules/fxmaster/assets/weatherEffects/effects/star_07.png","modules/fxmaster/assets/weatherEffects/effects/star_08.png","modules/fxmaster/assets/weatherEffects/effects/star_09.png"],a);return i.startColor=PIXI.particles.ParticleUtils.createSteppedGradient(a.color.list,!0),i}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:.9,time:.3},{value:.9,time:.95},{value:0,time:1}]},scale:{start:.05,end:.03,minimumScaleMultiplier:.85},speed:{start:5,end:5,minimumSpeedMultiplier:.6},color:{list:[{value:"bee8ee",time:0},{value:"d0e8ec",time:1}]},startRotation:{min:0,max:360},rotationSpeed:{min:20,max:50},lifetime:{min:8,max:15},blendMode:"screen",emitterLifetime:-1},{inplace:!1})}class RainWeatherEffect extends AbstractWeatherEffect{static get label(){return"Rain"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/rain.png"}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{start:.7,end:.1},scale:{start:1,end:1,minimumScaleMultiplier:.8},speed:{start:3500,end:3500,minimumSpeedMultiplier:.8},startRotation:{min:75,max:75},lifetime:{min:.5,max:.5}},{inplace:!1});static SPLASH_CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{start:1,end:1},scale:{start:.6,end:.6,minimumScaleMultiplier:.8},speed:{start:0,end:0},startRotation:{min:-90,max:-90},noRotation:!0,lifetime:{min:.5,max:.5}},{inplace:!1});getParticleEmitters(){return[this._getRainEmitter(this.parent),this._getSplashEmitter(this.parent)]}_getRainEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:-.05*t.width,y:-.1*t.height,w:t.width,h:.8*t.height},maxParticles:s,frequency:1/s},{inplace:!1});return this.applyOptionsToConfig(a),new PIXI.particles.Emitter(e,["ui/particles/rain.png"],a)}_getSplashEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.SPLASH_CONFIG,{spawnRect:{x:0,y:.25*t.height,w:t.width,h:.75*t.height},maxParticles:.5*s,frequency:2/s},{inplace:!1});return this.applyOptionsToConfig(a),new PIXI.particles.Emitter(e,["ui/particles/drop.png"],a)}}class SnowWeatherEffect extends AbstractWeatherEffect{static get label(){return"Snow"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/snow.png"}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{start:.9,end:.5},scale:{start:.2,end:.4,minimumScaleMultiplier:.5},speed:{start:190,end:210,minimumSpeedMultiplier:.6},startRotation:{min:50,max:75},rotationSpeed:{min:0,max:200},lifetime:{min:4,max:4}},{inplace:!1});getParticleEmitters(){return[this._getSnowEmitter(this.parent)]}_getSnowEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:0,y:-.1*t.height,w:t.width,h:t.height},maxParticles:s,frequency:(this.constructor.CONFIG.lifetime.min+this.constructor.CONFIG.lifetime.max)/2/s},{inplace:!1});return this.applyOptionsToConfig(a),new PIXI.particles.Emitter(e,["ui/particles/snow.png"],a)}}class AutumnLeavesWeatherEffect extends AbstractWeatherEffect{static get label(){return"Autumn Leaves"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/leaves.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.25,max:1,step:.05,decimals:2},"-=direction":null})}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{start:.9,end:.5},scale:{start:.2,end:.4,minimumScaleMultiplier:.5},speed:{start:20,end:60,minimumSpeedMultiplier:.6},startRotation:{min:0,max:365},rotation:180,rotationSpeed:{min:100,max:200},lifetime:{min:10,max:10}},{inplace:!1});getParticleEmitters(){return[this._getLeafEmitter(this.parent)]}_getLeafEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i=Array.fromRange(6).map((e=>`ui/particles/leaf${e+1}.png`));return new PIXI.particles.Emitter(e,i,a)}}class SpiderWeatherEffect extends AbstractWeatherEffect{static get label(){return"Spider"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/spiders.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.05,value:.3,max:.7,step:.05,decimals:2},"-=direction":void 0})}getParticleEmitters(){return[this._getSpidersEmitter(this.parent)]}_getSpidersEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a);const i={framerate:"24",textures:[],loop:!0};for(let e=0;e<25;e++)i.textures.push({count:1,texture:`modules/fxmaster/assets/weatherEffects/effects/Spider.${String(e).padStart(4,"0")}.png`});const r=new PIXI.particles.Emitter(e,i,a);return r.particleConstructor=PIXI.particles.AnimatedParticle,r}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}]},scale:{list:[{value:.05,time:0},{value:.08,time:.05},{value:.08,time:.95},{value:.05,time:1}],minimumScaleMultiplier:.2},speed:{start:15,end:25,minimumSpeedMultiplier:.6},startRotation:{min:0,max:360},lifetime:{min:5,max:10},blendMode:"normal",emitterLifetime:-1},{inplace:!1})}class EaglesWeatherEffect extends AbstractWeatherEffect{static _textureCache=void 0;static get label(){return"Eagles"}static get icon(){return"modules/fxmaster/assets/weatherEffects/icons/crows.png"}static get parameters(){return foundry.utils.mergeObject(super.parameters,{density:{min:.001,value:.006,max:.01,step:.001,decimals:3},"-=direction":void 0,animations:{label:"FXMASTER.Animations",type:"multi-select",options:{flap:"FXMASTER.WeatherBirdsAnimationsFlap",glide:"FXMASTER.WeatherBirdsAnimationsGlide"},value:["glide"]}})}getParticleEmitters(){return[this._getEmitter(this.parent)]}_getEmitter(e){const t=canvas.dimensions,s=t.width/t.size*(t.height/t.size)*this.options.density.value,a=foundry.utils.mergeObject(this.constructor.CONFIG,{spawnRect:{x:t.sceneRect.x,y:t.sceneRect.y,w:t.sceneRect.width,h:t.sceneRect.height},maxParticles:s,frequency:this.constructor.CONFIG.lifetime.min/s},{inplace:!1});this.applyOptionsToConfig(a),this._textures||this._initializeTextures();const i=Array.fromRange(19).map((e=>({textureNumber:e,count:1}))),r={glide:[{textureNumber:0,count:30},...Array(4).fill(i).deepFlatten(),{textureNumber:0,count:68}],flap:i},getAnim=e=>({framerate:20,loop:!0,textures:e.map((({textureNumber:e,count:t})=>({texture:this._textures[e],count:t})))}),n=(this.options.animations?.value??[]).filter((e=>Object.keys(r).includes(e))).map((e=>getAnim(r[e])));0===n.length&&n.push(getAnim(r.glide));const o=new PIXI.particles.Emitter(e,n,a);return o.particleConstructor=PIXI.particles.AnimatedParticle,o}static CONFIG=foundry.utils.mergeObject(SpecialEffect.DEFAULT_CONFIG,{alpha:{list:[{value:0,time:0},{value:1,time:.02},{value:1,time:.98},{value:0,time:1}],isStepped:!1},scale:{list:[{value:.15,time:0},{value:.3,time:.1},{value:.3,time:.9},{value:.15,time:1}],isStepped:!1},speed:{start:360,end:400,minimumSpeedMultiplier:.6},startRotation:{min:0,max:360},lifetime:{min:7,max:14},blendMode:"normal",emitterLifetime:-1},{inplace:!1});get _textures(){if(!this.constructor._textureCache){const e=PIXI.Texture.from("modules/fxmaster/assets/weatherEffects/effects/eagle.png"),t={meta:{scale:"1"},frames:{"eagle0000.png":{frame:{x:0,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0001.png":{frame:{x:512,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0002.png":{frame:{x:0,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0003.png":{frame:{x:512,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0004.png":{frame:{x:1024,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0005.png":{frame:{x:1024,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0006.png":{frame:{x:0,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0007.png":{frame:{x:512,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0008.png":{frame:{x:1024,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0009.png":{frame:{x:1536,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0010.png":{frame:{x:1536,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0011.png":{frame:{x:1536,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0012.png":{frame:{x:0,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0013.png":{frame:{x:512,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0014.png":{frame:{x:1024,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0015.png":{frame:{x:1536,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0016.png":{frame:{x:2048,y:0,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0017.png":{frame:{x:2048,y:512,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0018.png":{frame:{x:2048,y:1024,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}},"eagle0019.png":{frame:{x:2048,y:1536,w:512,h:512},rotated:!1,trimmed:!1,spriteSourceSize:{x:0,y:0,w:512,h:512},sourceSize:{w:512,h:512}}}};new PIXI.Spritesheet(e,t).parse((e=>{this.constructor._textureCache=Object.values(e)}))}return this.constructor._textureCache}}const r={snowstorm:SnowstormWeatherEffect,bubbles:BubblesWeatherEffect,clouds:CloudsWeatherEffect,embers:EmbersWeatherEffect,rainsimple:RainSimpleWeatherEffect,stars:StarsWeatherEffect,crows:CrowsWeatherEffect,bats:BatsWeatherEffect,spiders:SpiderWeatherEffect,fog:FogWeatherEffect,raintop:RaintopWeatherEffect,birds:BirdsWeatherEffect,leaves:AutumnLeavesWeatherEffect,rain:RainWeatherEffect,snow:SnowWeatherEffect,eagles:EaglesWeatherEffect};class FXColorFilter extends PIXI.filters.AdjustmentFilter{constructor(e,t){super(),this.id=t,this.enabled=!1,this.skipFading=!1,this.configure(e)}static get label(){return"Color"}static get faIcon(){return"fas fa-palette"}static get parameters(){return{color:{label:"FXMASTER.Tint",type:"color",value:{value:"#FFFFFF",apply:!1}},saturation:{label:"FXMASTER.Saturation",type:"range",max:2,min:0,step:.1,value:1},contrast:{label:"FXMASTER.Contrast",type:"range",max:2,min:0,step:.1,value:1},brightness:{label:"FXMASTER.Brightness",type:"range",max:2,min:0,step:.1,value:1},gamma:{label:"FXMASTER.Gamma",type:"range",max:2,min:0,step:.1,value:1}}}static get zeros(){return{red:1,green:1,blue:1,saturation:1,gamma:1,brightness:1,contrast:1}}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}configure(e){if(e.color.apply){const t=foundry.utils.hexToRGB(colorStringToHex(e.color.value));e.red=t[0],e.green=t[1],e.blue=t[2]}else e.red=e.green=e.blue=1;this.options={...this.constructor.default,...e}}applyOptions(e=this.options){if(!e)return;const t=Object.keys(e);for(const s of t)this[s]=e[s]}animateOptions(e=this.options){const t={name:`fxmaster.${this.constructor.name}.${this.id}`,duration:4e3},s=Object.keys(e).reduce(((t,s)=>(t.push({parent:this,attribute:s,to:e[s]}),t)),[]);return CanvasAnimation.animateLinear(s,t)}step(){}play(){return this.enabled=!0,this.skipFading?(this.skipFading=!1,void this.applyOptions()):this.animateOptions()}stop(){return new Promise((e=>{if(this.skipFading)return this.skipFading=!1,this.enabled=!1,this.applyOptions(this.constructor.zeros),void e();this.animateOptions(this.constructor.zeros).finally((()=>{this.enabled=!1,e()}))}))}}class FXUnderwaterFilter extends PIXI.filters.DisplacementFilter{constructor(e,t){let s=new PIXI.Sprite.from("modules/fxmaster/assets/filterEffects/clouds.png");super(s),this.id=t,this.dizzyMap=s,this.speedConfig={},this.configure(e),this.dizzyMap.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,this.dizzyMap.anchor.set(.5),this.dizzyMap.x=canvas.scene.data.width/2,this.dizzyMap.y=canvas.scene.data.height/2,this.dizzyMap.scale.x=4,this.dizzyMap.scale.y=4,this.enabled=!1}static get label(){return"Underwater"}static get faIcon(){return"fas fa-water"}static get parameters(){return{speed:{label:"FXMASTER.Speed",type:"range",max:5,min:0,step:.1,value:.3},scale:{label:"FXMASTER.Scale",type:"number",value:4}}}static get zeros(){return{speed:0,scale:1}}step(){this.maskSprite.x+=this.speedConfig.speed}play(){canvas.background.addChild(this.dizzyMap),this.enabled=!0,this.dizzyMap.scale.x=this.speedConfig.scale,this.dizzyMap.scale.y=this.speedConfig.scale}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}configure(e){this.speedConfig={...this.constructor.defaults,...e}}applyOptions(){if(!this.options)return;const e=Object.keys(this.options);for(const t of e)this[t]=this.options[t]}stop(){return new Promise((e=>{canvas.background.removeChild(this.dizzyMap),this.enabled=!1,e()}))}}class FXCanvasAnimation extends CanvasAnimation{static async animateSmooth(e,{context:t,name:s=null,duration:a=1e3,ontick:i,ease:r}={}){return e=e.map((e=>(e.delta=e.to-e.parent[e.attribute],e.done=0,e.remaining=a,e))).filter((e=>0!==e.delta)),t=t??canvas.stage,this._animatePromise(this._animateFrameSmooth(r),t,s,e,a,i)}static _animateFrameSmooth(e){return function(t,s,a,i,r,n){let o=0===i.length,c=r*PIXI.settings.TARGET_FPMS/t;try{for(let t of i){let s=t.delta/c;if(t.d=s,t.remaining<1.25*Math.abs(s))t.parent[t.attribute]=t.to,t.done=t.delta,t.remaining=0,o=!0;else{let a=t.done/t.delta,i=t.to-t.delta;t.done+=s,t.remaining=Math.abs(t.delta)-Math.abs(t.done),t.parent[t.attribute]=e(a)*t.delta+i}}n&&n(c,i)}catch(e){a(e)}o&&s()}}}const n={Linear:function easeLinear(e){return e},InSine:function easeInSine(e){return 1-Math.cos(e*Math.PI/2)},OutSine:function easeOutSine(e){return Math.sin(e*Math.PI/2)},InOutSine:function easeInOutSine(e){return-(Math.cos(Math.PI*e)-1)/2},InBack:function easeInBack(e){const t=1.70158;return(t+1)*e*e*e-t*e*e},OutBack:function easeOutBack(e){const t=1.70158;return 1+(t+1)*Math.pow(e-1,3)+t*Math.pow(e-1,2)},InOutBack:function easeInOutBack(e){const t=2.5949095;return e<.5?Math.pow(2*e,2)*(7.189819*e-t)/2:(Math.pow(2*e-2,2)*((t+1)*(2*e-2)+t)+2)/2},InCubic:function easeInCubic(e){return e*e*e},OutCubic:function easeOutCubic(e){return 1-Math.pow(1-e,3)},InOutCubic:function easeInOutCubic(e){return e<.5?4*e*e*e:1-Math.pow(-2*e+2,3)/2},InCirc:function easeInCirc(e){return 1-Math.sqrt(1-Math.pow(e,2))},OutCirc:function easeOutCirc(e){return Math.sqrt(1-Math.pow(e-1,2))},InOutCirc:function easeInOutCirc(e){return e<.5?(1-Math.sqrt(1-Math.pow(2*e,2)))/2:(Math.sqrt(1-Math.pow(-2*e+2,2))+1)/2}};class FXLightningFilter extends PIXI.filters.AdjustmentFilter{constructor(e,t){super(),this.id=t,this.enabled=!1,this.configure(e),this.next=canvas.app.ticker.lastTime/10}static get label(){return"Lightning"}static get faIcon(){return"fas fa-bolt"}static get parameters(){return{frequency:{label:"FXMASTER.Period",type:"range",max:2e3,min:100,step:5,value:500},spark_duration:{label:"FXMASTER.Duration",type:"range",max:2e3,min:100,step:5,value:300},brightness:{label:"FXMASTER.Brightness",type:"range",max:4,min:0,step:.1,value:1.3}}}static get zeros(){return{frequency:0,spark_duration:0,brightness:1}}play(){this.enabled=!0}step(){if(canvas.app.ticker.lastTime/10>this.next){this.next=canvas.app.ticker.lastTime/10+40+this.options.frequency*Math.random();const animate=e=>{const t=[{parent:this,attribute:"brightness",to:e}];return FXCanvasAnimation.animateSmooth(t,{name:`fxmaster.${this.constructor.name}.${this.id}.${randomID()}`,context:this,duration:100+this.options.spark_duration*Math.random(),ease:n.InOutBack})};animate(this.options.brightness).then((()=>{animate(1)}))}}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}configure(e){const t={...this.constructor.default,...e};this.options=t}applyOptions(e=this.options){if(!e)return;const t=Object.keys(e);for(const s of t)this[s]=e[s]}stop(){return new Promise((e=>{this.enabled=!1,e()}))}}class FXPredatorFilter extends PIXI.filters.CRTFilter{constructor(e,t){super(),this.id=t,this.enabled=!1,this.vignetting=0,this.curvature=0,this.configure(e)}static get label(){return"Predator"}static get faIcon(){return"fas fa-wave-square"}static get parameters(){return{noise:{label:"FXMASTER.Noise",type:"range",max:1,min:0,step:.1,value:.1},period:{label:"FXMASTER.Speed",type:"range",max:.5,min:0,step:.01,value:.02}}}static get zeros(){return{noise:0,period:1e3}}play(){this.enabled=!0,this.seed=Math.random(),this.applyOptions()}step(){this.seed+=1;const e=1/this.options.period;this.time=canvas.app.ticker.lastTime/e}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}configure(e){this.options={...this.constructor.default,...e}}applyOptions(){if(!this.options)return;const e=Object.keys(this.options);for(const t of e)this[t]=this.options[t]}stop(){return new Promise((e=>{this.enabled=!1,this.applyOptions(this.constructor.zeros),e()}))}}class FXOldFilmFilter extends PIXI.filters.OldFilmFilter{constructor(e,t){super(),this.id=t,this.enabled=!1,this.skipFading=!1,this.vignetting=0,this.vignettingAlpha=0,this.configure(e)}static get label(){return"Old Film"}static get faIcon(){return"fas fa-film"}static get parameters(){return{sepia:{label:"FXMASTER.Sepia",type:"range",max:1,min:0,step:.1,value:.3},noise:{label:"FXMASTER.Noise",type:"range",max:1,min:0,step:.1,value:.1}}}static get zeros(){return{sepia:0,noise:0}}play(){this.enabled=!0,this.seed=Math.random(),this.applyOptions()}step(){this.seed++}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}configure(e){this.options={...this.constructor.default,...e}}applyOptions(){if(!this.options)return;const e=Object.keys(this.options);for(const t of e)this[t]=this.options[t]}stop(){return new Promise((e=>{this.enabled=!1,this.applyOptions(this.constructor.zeros),e()}))}}class FXBloomFilter extends PIXI.filters.AdvancedBloomFilter{constructor(e,t){super(),this.id=t,this.enabled=!1,this.skipFading=!1,this.configure(e)}static get label(){return"Bloom"}static get faIcon(){return"fas fa-ghost"}static get parameters(){return{blur:{label:"FXMASTER.Blur",type:"range",max:10,min:0,step:1,value:1},bloomScale:{label:"FXMASTER.Bloom",type:"range",max:1,min:0,step:.1,value:.1},threshold:{label:"FXMASTER.Threshold",type:"range",max:1,min:0,step:.1,value:.5}}}static get zeros(){return{noise:0,bloomScale:0,threshold:1}}static get default(){return Object.fromEntries(Object.entries(this.parameters).map((([e,t])=>[e,t.value])))}play(){return this.enabled=!0,this.skipFading?(this.skipFading=!1,void this.applyOptions()):this.animateOptions()}step(){}configure(e){this.options={...this.constructor.default,...e}}applyOptions(e=this.options){if(!e)return;const t=Object.keys(e);for(const s of t)this[s]=e[s]}animateOptions(e=this.options){const t={name:`fxmaster.${this.constructor.name}.${this.id}`,duration:4e3},s=Object.keys(e).reduce(((t,s)=>(t.push({parent:this,attribute:s,to:e[s]}),t)),[]);return CanvasAnimation.animateLinear(s,t)}async stop(){if(await CanvasAnimation.terminateAnimation(`fxmaster.${this.constructor.name}.${this.id}`),this.skipFading)return this.skipFading=!1,this.enabled=!1,void this.applyOptions(this.constructor.zeros);this.animateOptions(this.constructor.zeros).finally((()=>{this.enabled=!1}))}}const o={weatherEffects:r,filters:{lightning:FXLightningFilter,underwater:FXUnderwaterFilter,predator:FXPredatorFilter,color:FXColorFilter,bloom:FXBloomFilter,oldfilm:FXOldFilmFilter},specials:{fxmaster:{label:"FXMaster",effects:[{label:"Smoke Bomb",file:"modules/fxmaster/assets/specialEffects/fxmaster/smokeBomb.webm",scale:{x:1,y:1},angle:0,anchor:{x:.5,y:.5},speed:0,author:"U~man"},{label:"Fireball",file:"modules/fxmaster/assets/specialEffects/fxmaster/fireball.webm",scale:{x:1,y:1},angle:0,anchor:{x:.5,y:.5},author:"U~man"},{label:"Blood Splatter",file:"modules/fxmaster/assets/specialEffects/fxmaster/blood.webm",scale:{x:.7,y:.7},angle:0,anchor:{x:.5,y:.5},author:"U~man"},{label:"Red Fire Cone",file:"modules/fxmaster/assets/specialEffects/jinker/dragonBornGold-RedFire15Cone.webm",scale:{x:1,y:1},angle:0,anchor:{x:0,y:.5},author:"Jinker"},{label:"Acid Line",file:"modules/fxmaster/assets/specialEffects/jinker/dragonBornBlack-CopperAcid30x5Line.webm",scale:{x:1,y:1},angle:0,anchor:{x:0,y:.5},author:"Jinker"},{label:"Witch Bolt",file:"modules/fxmaster/assets/specialEffects/jb2a/Witch_Bolt_Blue_600x200.webm",scale:{x:.7,y:.7},angle:0,anchor:{x:0,y:.5},author:"JB2A"}]}}};const c=PIXI.LegacyGraphics??PIXI.Graphics;class WeatherLayer extends CanvasLayer{weather=void 0;weatherEffects={};_sceneMask=void 0;_sceneMaskFilter=void 0;static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"weather",zIndex:250})}get shouldMaskToScene(){return!!canvas.scene?.img}_createInvertedMask(){const t=new c;return canvas.drawings.placeables.forEach((s=>{if(!s.document.getFlag(e,"masking"))return;t.beginFill(0);const a=s.shape.geometry.graphicsData[0].shape.clone();switch(s.data.type){case CONST.DRAWING_TYPES.ELLIPSE:a.x=s.center.x,a.y=s.center.y,t.drawShape(a);break;case CONST.DRAWING_TYPES.POLYGON:case CONST.DRAWING_TYPES.FREEHAND:{const e=s.data.points.reduce(((e,t)=>(e.push(t[0]+s.x,t[1]+s.y),e)),[]);t.drawPolygon(e);break}default:a.x=s.x,a.y=s.y,t.drawShape(a)}t.endFill()})),t}_createMask(){const t=new c;return t.beginFill(0).drawShape(canvas.dimensions.rect).endFill(),canvas.drawings.placeables.forEach((s=>{if(!s.document.getFlag(e,"masking"))return;t.beginHole();const a=s.shape.geometry.graphicsData[0].shape.clone();switch(s.data.type){case CONST.DRAWING_TYPES.ELLIPSE:a.x=s.center.x,a.y=s.center.y,t.drawShape(a);break;case CONST.DRAWING_TYPES.POLYGON:case CONST.DRAWING_TYPES.FREEHAND:{const e=s.data.points.reduce(((e,t)=>(e.push(t[0]+s.x,t[1]+s.y),e)),[]);t.drawPolygon(e);break}default:a.x=s.x,a.y=s.y,t.drawShape(a)}t.endHole()})),t}updateMask(){if(!this.weather||!canvas.scene)return;this.weather.mask&&(this.weather.removeChild(this.weather.mask),this.weather.mask.destroy(),this.weather.mask=null);const t=canvas.scene.getFlag(e,"invert")?this._createInvertedMask():this._createMask();this.weather.addChild(t),Hooks.callAll("updateMask",this,this.weather,t),this.weather.mask=t}async tearDown(){return Object.values(this.weatherEffects).forEach((({fx:e})=>e.stop())),this.weather=void 0,this.mask=null,this.weatherEffects={},this._sceneMask?.destroy(),this._sceneMask=void 0,this._sceneMaskFilter=void 0,super.tearDown()}async draw(){if(game.settings.get(e,"enable")&&!game.settings.get(e,"disableAll"))return isOnTargetMigration()?await this._draw():executeWhenWorldIsMigratedToLatest(this._draw.bind(this)),this}async _draw(){this.shouldMaskToScene&&(this._sceneMask=this._drawSceneMask(),this.addChild(this._sceneMask),this._sceneMaskFilter=this._createSceneMaskFilter()),await this.drawWeather(),this.updateMask()}async drawWeather({soft:s=!1}={}){if(!canvas.scene)return;this.weather||(this.weather=this.addChild(new PIXI.Container),this._sceneMaskFilter&&(this.weather.filters=[this._sceneMaskFilter])),Hooks.callAll("drawWeather",this,this.weather,this.weatherEffects);const a=Promise.all(Object.entries(this.weatherEffects).map((async([e,t])=>{s?await t.fx.fadeOut({timeout:2e4}):t.fx.stop(),this.weatherEffects[e]===t&&delete this.weatherEffects[e]}))),i=canvas.scene.getFlag(e,"effects")??{};for(const e in i){if(!(i[e].type in CONFIG.fxmaster.weather)){t.warn(`Weather effect '${e}' is of unknown type '${i[e].type}', skipping it.`);continue}const s=Object.fromEntries(Object.entries(i[e].options).map((([e,t])=>[e,{value:t}])));this.weatherEffects[e]={type:i[e].type,fx:new CONFIG.fxmaster.weather[i[e].type](this.weather,s)},this.weatherEffects[e].fx.play()}await a}_drawSceneMask(){const e=new CachedContainer,t=(new c).beginFill(16777215).drawShape(canvas.dimensions.rect).endFill().beginHole().drawShape(
/**
 * If the area of the intersection between the Rectangles `a` and `b` is not zero,
 * returns the area of intersection as a Rectangle object. Otherwise, returns an empty Rectangle
 * with its properties set to zero.
 * Rectangles without area (width or height equal to zero) can't intersect or be intersected
 * and will always return an empty rectangle with its properties set to zero.
 *
 * @method intersects
 * @memberof PIXI.Rectangle#
 * @param {Rectangle} a - The Rectangle to intersect with `b`.
 * @param {Rectangle} b - The Rectangle to intersect with `a`.
 * @param {Rectangle} [outRect] - A Rectangle object in which to store the value,
 * optional (otherwise will create a new Rectangle).
 * @returns {Rectangle} The intersection of `a` and `b`.
 * @remarks Incorporated from https://github.com/pixijs/pixijs/tree/dev/packages/math-extras
 * @license MIT
 */
function intersectRectangles(e,t,s){s||(s=new PIXI.Rectangle);const a=e.x<t.x?t.x:e.x,i=e.right>t.right?t.right:e.right;if(i<=a)return s.x=s.y=s.width=s.height=0,s;const r=e.y<t.y?t.y:e.y,n=e.bottom>t.bottom?t.bottom:e.bottom;return n<=r?(s.x=s.y=s.width=s.height=0,s):(s.x=a,s.y=r,s.width=i-a,s.height=n-r,s)}(canvas.dimensions.sceneRect,canvas.dimensions.rect)).endHole();return e.addChild(t),e}_createSceneMaskFilter(){if(!this._sceneMask)return;const e=InverseOcclusionMaskFilter.create({alphaOcclusion:0,uMaskSampler:this._sceneMask.renderTexture},"b");return e.enabled=!0,e}_setLayerMask(){t.warn("'canvas.fxmaster._setLayerMask' doesn't actually do anything anymore and is only kept for compatibility reasons. It will be removed in a futue version. Please don't use it anymore.")}_createInvertMask(){return t.warn("'canvas.fxmaster._createInvertMask' is deprecated and will be removed in a future version. Please use 'canvas.fxmaster._createInvertedMask' instead."),this._createInvertedMask()}}class FilterManager{constructor(){this.filterInfos={},this.filters={},this._ticker=!1,this.filteredLayers={background:!0,foreground:!0,drawings:!0,tokens:!0}}async activate(){await this.update({skipFading:!0}),this._ticker||(canvas.app.ticker.add(this._animate,this),this._ticker=!0)}async update({skipFading:s=!1}={}){if(!canvas.scene)return;this.filterInfos=Object.fromEntries(Object.entries(canvas.scene.getFlag(e,"filters")??{}).filter((([e,s])=>s.type in CONFIG.fxmaster.filters||(t.warn(`Filter effect '${e}' is of unknown type '${s.type}', skipping it.`),!1)))),this.filteredLayers=canvas.scene.getFlag(e,"filteredLayers")??this.filteredLayers;const a=Object.keys(this.filterInfos).filter((e=>!(e in this.filters))),i=Object.keys(this.filterInfos).filter((e=>e in this.filters)),r=Object.keys(this.filters).filter((e=>!(e in this.filterInfos)));for(const e of a){const{type:t,options:a}=this.filterInfos[e];this.filters[e]=new CONFIG.fxmaster.filters[t](a,e),this.filters[e].skipFading=s,this.filters[e].play()}for(const e of i){const{options:t}=this.filterInfos[e],s=this.filters[e];s.configure(t),s.play()}const n=r.map((async e=>{const t=this.filters[e];await t.stop(),[canvas.background,canvas.foreground,canvas.drawings,canvas.tokens].forEach((e=>FilterManager._removeFilterFromContainer(e,t))),delete this.filters[e]}));await Promise.all(n),this.applyFiltersToLayers()}applyFiltersToLayers(){const e=Object.values(this.filters);Object.entries(this.filteredLayers).forEach((([t,s])=>{const a=canvas[t],i=a.filters?.filter((t=>!e.includes(t)))??[];a.filters=i.concat(s?e:[])}))}static _removeFilterFromContainer(e,t){e.filters=e.filters?.filter((e=>e!==t))??null}async dump(){await resetFlags(canvas.scene,"filters",this.filterInfos)}async clear(){const e=Object.values(this.filters).map((e=>e.stop()));this.filters={},await Promise.all(e)}async addFilter(e,t,s){e=e??randomID(),this.filterInfos[e]={type:t,options:s},await this.dump()}async removeFilter(t){if(!canvas.scene)return;const s=this.filters[t];s&&await s.stop();const a={[`-=${t}`]:null};await canvas.scene.setFlag(e,"filters",a)}async removeAll(){canvas.scene&&await canvas.scene.unsetFlag(e,"filters")}async switch(e,t,s){return this.filterInfos[e]?this.removeFilter(e):this.addFilter(e,t,s)}_animate(){for(const e in this.filters)this.filters[e].step()}get apply_to(){return t.warn("'FXMASTER.filters.apply_to' is deprecated and will be removed in a future version. Please use 'FXMASTER.filters.filteredLayers' instead."),this.filteredLayers}}const l=new FilterManager;class SpecialsLayer extends CanvasLayer{constructor(){super(),this.videos=[],this._dragging=!1,this.ruler=null,this.windowVisible=!1,game.socket.on("module.fxmaster",(e=>{this.playVideo(e)}))}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"specials",zIndex:245})}async draw(){return await super.draw(),this.ruler=this.addChild(new PIXI.Graphics),this.visible=!0,this}async tearDown(){this.ruler=null;for(const e of this.videos)e.remove();return this.videos=[],super.tearDown()}_configureProjectile(e,t){!t.distance||t.speed&&"auto"!=t.speed||(t.speed=t.distance/t.duration);const s=t.duration*t.speed,a=s*Math.cos(t.rotation),i=s*Math.sin(t.rotation),r=[{parent:e,attribute:"x",to:t.position.x+a},{parent:e,attribute:"y",to:t.position.y+i}];let o=1e3*t.duration;foundry.utils.hasProperty(t,"animationDelay")&&(o-=Math.max(0,1e3*(t.animationDelay.end+t.animationDelay.start)));const animate=function(){FXCanvasAnimation.animateSmooth(r,{name:`fxmaster.video.${randomID()}.move`,context:this,duration:o,ease:n[t.ease]})};foundry.utils.hasProperty(t,"animationDelay.start")?setTimeout(animate,1e3*t.animationDelay.start):animate()}_configureRotate(e,t){const s=[{parent:e,attribute:"angle",to:90*t.rotationSpeed}];let a=1e3*t.duration;foundry.utils.hasProperty(t,"animationDelay")&&(a-=Math.max(0,1e3*(t.animationDelay.end+t.animationDelay.start)));const animate=function(){FXCanvasAnimation.animateSmooth(s,{name:`fxmaster.video.${randomID()}.rotate`,context:this,duration:a,ease:n[t.ease]})};foundry.utils.hasProperty(t,"animationDelay.start")?setTimeout(animate,1e3*t.animationDelay.start):animate()}_configureSprite(e,t){if(e.anchor.set(t.anchor.x,t.anchor.y),e.rotation=Math.normalizeRadians(t.rotation-Math.toRadians(t.angle)),e.scale.set(t.scale.x,t.scale.y),e.position.set(t.position.x,t.position.y),t.width){if(t.keepAspect){const s=e.height/e.width;e.height=t.width*s}e.width=t.width}(t.speed||t.distance)&&this._configureProjectile(e,t),t.rotationSpeed&&this._configureRotate(e,t)}playVideo(e){return new Promise((t=>{e=foundry.utils.mergeObject({anchor:{x:.5,y:.5},rotation:0,scale:{x:1,y:1},position:{x:0,y:0},playbackRate:1,ease:"Linear"},e);const s=document.createElement("video");let a;s.preload="auto",s.crossOrigin="anonymous",s.src=e.file,s.playbackRate=e.playbackRate,this.videos.push(s),s.oncanplay=()=>{const t=PIXI.Texture.from(s);a=new PIXI.Sprite(t),this.addChild(a),e.dimensions={w:s.videoWidth,h:s.videoHeight},e.duration=s.duration,this._configureSprite(a,e)},s.onerror=()=>{this.removeChild(a),t(),a?.destroy()},s.onended=()=>{this.removeChild(a),a?.destroy(),t()}}))}static _createMacro(e){return`\n      const data = {\n        file: "${e.file}",\n        position: {\n          x: canvas.scene.dimensions.width / 2,\n          y: canvas.scene.dimensions.height / 2\n        },\n        anchor : {\n          x: ${e.anchor.x},\n          y: ${e.anchor.y}\n        },\n        angle: ${e.angle},\n        speed: ${e.speed},\n        scale: {\n          x: ${e.scale.x},\n          y: ${e.scale.y}\n        }\n      };\n      const tokens = canvas.tokens.controlled;\n      // No tokens are selected, play in a random position\n      if (tokens.length === 0) {\n        canvas.specials.playVideo(data);\n        game.socket.emit("module.fxmaster", data);\n        return;\n      }\n      const targets = game.user.targets;\n      if (targets.size !== 0) {\n        tokens.forEach(t1 => {\n          targets.forEach(t2 => {\n            canvas.specials.drawFacing(data, t1, t2);\n          })\n        })\n        return;\n      }\n      // Play effect on each token\n      tokens.forEach(t => {\n        data.position = {\n          x: t.position.x + t.w / 2,\n          y: t.position.y + t.h / 2\n        };\n        canvas.specials.playVideo(data);\n        game.socket.emit("module.fxmaster", data);\n      })\n\n    `}drawSpecialToward(e,t,s){const a={x:t.position.x+t.w/2,y:t.position.y+t.h/2},i=foundry.utils.mergeObject(e,{position:{x:a.x,y:a.y}}),r={x:s.position.x+s.w/2,y:s.position.y+s.h/2},n=new Ray(a,r);return i.distance=n.distance,i.rotation=n.angle,game.socket.emit("module.fxmaster",i),this.playVideo(i)}drawFacing(e,t,s){const a={x:t.position.x+t.w/2,y:t.position.y+t.h/2},i=foundry.utils.mergeObject(e,{position:{x:a.x,y:a.y}}),r={x:s.position.x+s.w/2,y:s.position.y+s.h/2},n=new Ray(a,r);return i.rotation=n.angle,game.socket.emit("module.fxmaster",i),this.playVideo(i)}_drawSpecial(e,t){e.stopPropagation();const s=Object.values(ui.windows).find((e=>"specials-config"==e.id));if(!s)return;const a=s.element.find(".special-effects.active");if(0==a.length)return;const i=a[0].dataset.effectId,r=a[0].closest(".folder").dataset.folderId,n=CONFIG.fxmaster.userSpecials[r].effects[i],o=foundry.utils.deepClone(n),{x:c,y:l}=e.data.origin??t,m={...o,position:{x:c,y:l},rotation:e.data.rotation};if(!e.data.destination)return game.socket.emit("module.fxmaster",m),this.playVideo(m);const u=s.element.find(".action-toggle.active a")[0].dataset.action,f=new Ray(e.data.origin,e.data.destination);switch(u){case"cast-throw":m.distance=f.distance,m.speed="auto";break;case"cast-extend":m.width=f.distance||m.width,m.speed=0;break;case"cast-expand":m.width=f.distance||m.width,m.keepAspect=!0,m.speed=0;break;case"cast-rotate":m.rotationSpeed=f.distance/canvas.grid.w,m.speed=0}return game.socket.emit("module.fxmaster",m),this.playVideo(m)}_onDragLeftDrop(e){const t={x:e.data.destination.x-e.data.origin.x,y:e.data.destination.y-e.data.origin.y},s=t.x/Math.hypot(t.x,t.y);e.data.rotation=t.y>0?Math.acos(s):-Math.acos(s),this._drawSpecial(e),this.ruler.clear()}_onDragLeftStart(){this.windowVisible=this._isWindowVisible(),this.windowVisible&&(this._dragging=!0)}_onDragLeftMove(e){if(!this.windowVisible)return;const t=new Ray(e.data.origin,e.data.destination);this.ruler.clear(),this.ruler.lineStyle(3,11141171,.6).drawCircle(t.A.x,t.A.y,2).moveTo(t.A.x,t.A.y).lineTo(t.B.x,t.B.y).drawCircle(t.B.x,t.B.y,2)}_isWindowVisible(){return!!Object.values(ui.windows).find((e=>"specials-config"==e.id))}_onClickLeft(e){this._dragging=!1;const t=e.data.origin;setTimeout((()=>{this._dragging||(e.data.rotation=0,e.data.destination=void 0,this._drawSpecial(e,t)),this._dragging=!1}),400)}}class WeatherConfig extends FormApplication{constructor(){super()}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["form","fxmaster","weathers","sidebar-popout"],closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:300,height:"auto",template:"modules/fxmaster/templates/weather-config.hbs",id:"effects-config",title:game.i18n.localize("WEATHERMANAGE.Title")})}getData(){const t=canvas.scene?.getFlag(e,"effects")??{},s=Object.fromEntries(Object.values(t).map((e=>[e.type,e.options])));return{effects:CONFIG.fxmaster.weather,activeEffects:s}}activateListeners(e){super.activateListeners(e),e.find(".config.weather .collapse").click((e=>this._onWeatherCollapse(e))),e.find('.config.weather input[type="range"]').on("input",(e=>this._onChangeRange(e)))}_onWeatherCollapse(e){let t=$(e.currentTarget).parents(".config.weather"),s=!t.children(".config.collapsible").hasClass("collapsed");this._collapse(t,s)}_collapse(e,t,s=250){let a=(e=$(e)).children(".config.collapsible"),i=e.find("header i.fa");t?a.slideUp(s,(()=>{a.addClass("collapsed"),i.removeClass("fa-angle-up").addClass("fa-angle-down")})):a.slideDown(s,(()=>{a.removeClass("collapsed"),i.removeClass("fa-angle-down").addClass("fa-angle-up")}))}async _updateObject(e,t){const s=CONFIG.fxmaster.weather,a=Object.fromEntries(Object.entries(s).filter((([,e])=>!!t[e.label])).map((([e,s])=>{const a=s.label;return[`core_${e}`,{type:e,options:Object.fromEntries(Object.entries(s.parameters).map((([e,s])=>[e,"color"===s.type?{apply:t[`${a}_${e}_apply`],value:t[`${a}_${e}`]}:t[`${a}_${e}`]])))}]})));resetFlags(canvas.scene,"effects",a)}}class SpecialCreate extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["form"],closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:320,height:"auto",template:"modules/fxmaster/templates/special-create.hbs",id:"add-effect",title:game.i18n.localize("FXMASTER.AddEffect")})}setDefault(e){this.default=e}getData(){const e=n;return{default:foundry.utils.mergeObject({folder:"Custom",angle:0,position:{x:0,y:0},anchor:{x:.5,y:.5},scale:{x:1,y:1},speed:0,animationDelay:{start:0,end:0},ease:"Linear",author:"",preset:!1},this.default),ease:Object.keys(e)}}activateListeners(e){super.activateListeners(e),e.find('input[type="range"]').on("input",(e=>this._onChangeRange(e)))}_updateObject(t,s){const a=game.settings.get(e,"specialEffects"),i={folder:s.folder,label:s.label,file:s.file,scale:{x:parseFloat(s.scaleX),y:parseFloat(s.scaleY)},angle:parseFloat(s.angle),anchor:{x:s.anchorX,y:s.anchorY},speed:parseFloat(s.speed),animationDelay:{start:parseFloat(s.animationDelayStart),end:parseFloat(s.animationDelayEnd)},ease:s.ease,preset:!1,author:""},r=a.filter((e=>e.label==i.label));r.length>0?r[0]=foundry.utils.mergeObject(r[0],i):a.push(i),game.settings.set(e,"specialEffects",a).then((()=>{Object.values(ui.windows).forEach((e=>{e instanceof SpecialsConfig&&e.render()}))}))}}class SpecialsConfig extends Application{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["fxmaster","specials","sidebar-popout"],closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:120,height:200,resizable:!0,dragDrop:[{dragSelector:".special-effects"}],template:"modules/fxmaster/templates/specials-config.hbs",id:"specials-config",title:game.i18n.localize("EFFECTCONTROLS.Title")})}getData(){return{folders:CONFIG.fxmaster.userSpecials}}activateListeners(t){t.find(".special-effects .description").click((e=>{let t=e.currentTarget.closest(".directory-list"),s=$(t).find(".directory-item");for(let e=0;e<s.length;e++)s[e].classList.remove("active");e.currentTarget.parentElement.classList.add("active")})),t.find("a[data-action=add-effect]").click((async()=>{(new SpecialCreate).render(!0)})),t.find(".preview video").hover((e=>{e.currentTarget.play()})),t.find(".del-effect").click((t=>{const s=t.currentTarget.closest(".folder").dataset.folderId,a=t.currentTarget.closest(".special-effects").dataset.effectId,i=CONFIG.fxmaster.userSpecials[s].effects[a],r=game.settings.get(e,"specialEffects"),n=r.findIndex((e=>e.label===i.label&&e.folder===i.folder));-1!==n&&(r.splice(n,1),game.settings.set(e,"specialEffects",r).then((()=>{this.render(!0)})))})),t.find(".edit-effect").click((e=>{const t=e.currentTarget.closest(".folder").dataset.folderId,s=e.currentTarget.closest(".special-effects").dataset.effectId,a=new SpecialCreate;a.setDefault(CONFIG.fxmaster.userSpecials[t].effects[s]),a.render(!0)})),t.find(".action-toggle").click((e=>{for(const t of e.currentTarget.parentElement.children)t.classList.remove("active");e.currentTarget.classList.add("active")}));t.find(".directory-list").on("click",".folder-header",this._toggleFolder.bind(this))}_toggleFolder(e){let t=$(e.currentTarget.parentElement);t.hasClass("collapsed")?t.removeClass("collapsed"):(t.addClass("collapsed"),t.find(".folder").addClass("collapsed"))}_onDragStart(e){const t=e.currentTarget.closest(".special-effects").dataset.effectId,s=e.currentTarget.closest(".folder").dataset.folderId,a=CONFIG.fxmaster.userSpecials[s].effects[t];a.type="SpecialEffect",e.dataTransfer.setData("text/plain",JSON.stringify(a))}}class FiltersConfig extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["form","fxmaster","filters","sidebar-popout"],closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,popOut:!0,editable:game.user.isGM,width:300,height:"auto",template:"modules/fxmaster/templates/filters-config.hbs",id:"filters-config",title:game.i18n.localize("FILTERMANAGE.Title")})}getData(){const t=canvas.scene?.getFlag(e,"filters")??{},s=Object.fromEntries(Object.values(t).map((e=>[e.type,e.options]))),a=canvas.scene?.getFlag(e,"filteredLayers")??{background:!0,foreground:!0,tokens:!0,drawings:!0};return{filters:CONFIG.fxmaster.filters,activeFilters:s,filteredLayers:a}}activateListeners(e){super.activateListeners(e),e.find(".config.filter .collapse").click((e=>this._onFilterCollapse(e))),e.find('.config.filter input[type="range"]').on("input",(e=>this._onChangeRange(e)))}_onFilterCollapse(e){let t=$(e.currentTarget).parents(".config.filter"),s=!t.children(".config.collapsible").hasClass("collapsed");this._collapse(t,s)}_collapse(e,t,s=250){let a=(e=$(e)).children(".config.collapsible"),i=e.find("header i.fa");t?a.slideUp(s,(()=>{a.addClass("collapsed"),i.removeClass("fa-angle-up").addClass("fa-angle-down")})):a.slideDown(s,(()=>{a.removeClass("collapsed"),i.removeClass("fa-angle-down").addClass("fa-angle-up")}))}async _updateObject(t,s){if(!canvas.scene)return;const a=CONFIG.fxmaster.filters,i=Object.fromEntries(Object.entries(a).filter((([,e])=>!!s[e.label])).map((([e,t])=>{const a=t.label;return[`core_${e}`,{type:e,options:Object.fromEntries(Object.entries(t.parameters).map((([e,t])=>[e,"color"===t.type?{apply:s[`${a}_${e}_apply`],value:s[`${a}_${e}`]}:s[`${a}_${e}`]])))}]}))),r={background:s.background,foreground:s.foreground,drawings:s.drawings,tokens:s.tokens};await canvas.scene.setFlag(e,"filteredLayers",r),resetFlags(canvas.scene,"filters",i)}}function getSceneControlButtons(t){null!=canvas&&t.push({name:"effects",title:"CONTROLS.Effects",icon:"fas fa-magic",layer:"specials",visible:game.user.role>=game.settings.get(e,"permission-create"),tools:[{name:"specials",title:"CONTROLS.SpecialFX",icon:"fas fa-hat-wizard",onClick:()=>{(new SpecialsConfig).render(!0)},button:!0},{name:"weather",title:"CONTROLS.Weather",icon:"fas fa-cloud-rain",onClick:()=>{(new WeatherConfig).render(!0)},visible:game.user.isGM,button:!0},{name:"save",title:"CONTROLS.SaveMacro",icon:"fas fa-save",onClick:()=>{let t=canvas.scene?.getFlag(e,"effects")??{},s=Object.values(t),a="icons/svg/windmill.svg",i="Weather";s.forEach((e=>{let t=CONFIG.fxmaster.weather[e.type].icon;t&&(a=t),i=CONFIG.fxmaster.weather[e.type].label}));const r=`Hooks.call('fxmaster.updateWeather', ${JSON.stringify(s)});`;Macro.create({type:"script",name:i,command:r,img:a}),ui.notifications.info(`Macro ${i} has been saved in the macro directory`)},visible:game.user.isGM,button:!0},{name:"invertmask",title:"CONTROLS.InvertMask",icon:"fas fa-mask",onClick:()=>{if(canvas.scene){const t=canvas.scene.getFlag(e,"invert")??!1;canvas.scene.setFlag(e,"invert",!t)}},visible:game.user.isGM,active:canvas.scene?.getFlag(e,"invert")??!1,toggle:!0},{name:"filters",title:"CONTROLS.Filters",icon:"fas fa-filter",onClick:()=>{(new FiltersConfig).render(!0)},visible:game.user.isGM,button:!0},{name:"clearfx",title:"CONTROLS.ClearFX",icon:"fas fa-trash",onClick:()=>{Dialog.confirm({title:game.i18n.localize("FXMASTER.Delete"),content:game.i18n.localize("FXMASTER.DeleteConfirm"),yes:()=>{canvas.scene&&(l.removeAll(),canvas.scene.unsetFlag(e,"effects"))},defaultYes:!0})},visible:game.user.isGM,button:!0}]})}let m;const u=new RegExp("([^.[]+|\\[('([^'\\\\]|\\\\.)+?'|\"([^\"\\\\]|\\\\.)+?\")\\])","g"),f=new RegExp("(^\\['|'\\]$|^\\[\"|\"\\]$)","g");function getWrapper(e){return function(t,...s){t.call(this,...s);const a=this.activeLayer;a instanceof SpecialsLayer&&a[e](...s)}}function registerWrappers(){!function registerCanvasWrappers(){const t=["_onClickLeft","_onDragLeftStart","_onDragLeftMove","_onDragLeftDrop"];for(const s of t)m.register(e,`Canvas.prototype.${s}`,getWrapper(s),"WRAPPER")}()}function parseSpecialEffects(){const e=game.settings.get("fxmaster","specialEffects"),t=foundry.utils.deepClone(CONFIG.fxmaster.specials);e.reduce(((e,t)=>{t.folder||(t.folder="Custom");const s=t.folder.toLowerCase().replace(/ /g,"");return e[s]||(e[s]={label:t.folder,effects:[]}),e[s].effects.push(t),e}),t),Object.keys(t).forEach((e=>{t[e].effects.sort(((e,t)=>(""+e.label).localeCompare(t.label)))})),CONFIG.fxmaster.userSpecials=t}Hooks.once("init",(()=>{if(!globalThis.libWrapper||(globalThis.libWrapper.is_fallback??1)){m=class{static get is_fallback(){return!0}static get WRAPPER(){return"WRAPPER"}static get MIXED(){return"MIXED"}static get OVERRIDE(){return"OVERRIDE"}static register(e,t,s,a="MIXED",{chain:i}={}){const r=t.endsWith("#set"),n=(t=r?t.slice(0,-4):t).match(u).map((e=>e.replace(/\\(.)/g,"$1").replace(f,""))),o=n.splice(0,1)[0];let c,l;if(0==n.length)c=globalThis,l=o;else{const e=eval;l=n.pop(),c=n.reduce(((e,t)=>e[t]),globalThis[o]??e(o))}let m=c,p=null;for(;m&&(p=Object.getOwnPropertyDescriptor(m,l),!p);)m=Object.getPrototypeOf(m);if(!p||!1===p?.configurable)throw`libWrapper Shim: '${t}' does not exist, could not be found, or has a non-configurable descriptor.`;let d=null;const h=i??("OVERRIDE"!=a.toUpperCase?.()&&3!=a)?function(){return s.call(this,d.bind(this),...arguments)}:function(){return s.apply(this,arguments)};if(r){if(!p.set)throw`libWrapper Shim: '${t}' does not have a setter`;d=p.set,p.set=h}else p.value?(d=p.value,p.value=h):(d=p.get,p.get=h);p.configurable=!0,Object.defineProperty(c,l,p)}};{const[e,t]=(()=>{const e=(import.meta?.url??Error().stack)?.match(/\/(worlds|systems|modules)\/(.+)(?=\/)/i);if(3!==e?.length)return[null,null];const t=e[2].split("/");if("worlds"===e[1])return t.find((e=>e&&game.world.id===e))?[game.world.id,game.world.title]:[null,null];if("systems"===e[1])return t.find((e=>e&&game.system.id===e))?[game.system.id,game.system.data.title]:[null,null];const s=t.find((e=>e&&game.modules.has(e)));return[s,game.modules.get(s)?.data?.title]})();if(!e||!t)return void console.error("libWrapper Shim: Could not auto-detect package ID and/or title. The libWrapper fallback warning dialog will be disabled.");Hooks.once("ready",(()=>{const s=t,a=`\n\t\t\t\t<p><b>'${t}' depends on the 'libWrapper' module, which is not present.</b></p>\n\t\t\t\t<p>A fallback implementation will be used, which increases the chance of compatibility issues with other modules.</p>\n\t\t\t\t<small><p>'libWrapper' is a library which provides package developers with a simple way to modify core Foundry VTT code, while reducing the likelihood of conflict with other packages.</p>\n\t\t\t\t<p>You can install it from the "Add-on Modules" tab in the <a href="javascript:game.shutDown()">Foundry VTT Setup</a>, from the <a href="https://foundryvtt.com/packages/lib-wrapper">Foundry VTT package repository</a>, or from <a href="https://github.com/ruipin/fvtt-lib-wrapper/">libWrapper's Github page</a>.</p></small>\n\t\t\t`,i="libwrapper-dont-remind-again";console.warn(`${t}: libWrapper not present, using fallback implementation.`),game.settings.register(e,i,{name:"",default:!1,type:Boolean,scope:"world",config:!1}),game.user.isGM&&!game.settings.get(e,i)&&new Dialog({title:s,content:a,buttons:{ok:{icon:'<i class="fas fa-check"></i>',label:"Understood"},dont_remind:{icon:'<i class="fas fa-times"></i>',label:"Don't remind me again",callback:()=>game.settings.set(e,i,!0)}}}).render(!0)}))}}else m=globalThis.libWrapper})),window.FXMASTER={filters:l},Hooks.once("init",(function(){game.settings.register(e,"enable",{name:"FXMASTER.Enable",default:!0,scope:"client",type:Boolean,config:!0,onChange:a}),game.settings.register(e,"specialEffects",{name:"specialEffects",default:[],scope:"world",type:Array,config:!1}),game.settings.register(e,"migration",{name:"migration",default:-1,scope:"world",type:Number,config:!1,onChange:onWorldMigrated}),game.settings.register(e,"clientMigration",{name:"clientMigration",default:-1,scope:"client",type:Number,config:!1}),game.settings.register(e,"permission-create",{name:"FXMASTER.PermissionCreate",hint:"FXMASTER.PermissionCreateHint",scope:"world",config:!0,default:foundry.CONST.USER_ROLES.ASSISTANT,type:Number,choices:{[foundry.CONST.USER_ROLES.PLAYER]:"USER.RolePlayer",[foundry.CONST.USER_ROLES.TRUSTED]:"USER.RoleTrusted",[foundry.CONST.USER_ROLES.ASSISTANT]:"USER.RoleAssistant",[foundry.CONST.USER_ROLES.GAMEMASTER]:"USER.RoleGamemaster"},onChange:a}),game.settings.register(e,"disableAll",{name:"FXMASTER.DisableAll",hint:"FXMASTER.DisableAllHint",default:!1,scope:"world",type:Boolean,config:!0}),Hooks.on("fxmaster.switchWeather",onSwitchWeather),Hooks.on("fxmaster.updateWeather",onUpdateWeather),Hooks.on("switchWeather",onSwitchWeatherDeprecated),Hooks.on("updateWeather",onUpdateWeatherDeprecated),function registerLayer(){CONFIG.Canvas.layers.fxmaster=isV9OrLater()?{layerClass:WeatherLayer,group:"primary"}:WeatherLayer,CONFIG.Canvas.layers.specials=isV9OrLater()?{layerClass:SpecialsLayer,group:"primary"}:SpecialsLayer}(),registerWrappers(),Handlebars.registerHelper("parameter",((e,t,s,a={})=>{const i=a[s]??e.default[s];switch(t.type){case"color":return`\n              <input type="checkbox" name="${e.label}_${s}_apply" ${i.apply?"checked":""}/>\n              <input type="color" name="${e.label}_${s}" value="${i.value}">\n              `;case"range":return`\n              <input type="range" step="${t.step}" min="${t.min}" max="${t.max}" name="${e.label}_${s}" value="${i}">\n              <span class="range-value">${i}</span>\n              `;case"number":return`\n              <input type="text" data-dtype="Number" name="${e.label}_${s}" value="${i}">\n              `;case"multi-select":return`<select class="multi-select" multiple name="${e.label}_${s}">${Object.entries(t.options).map((([e,t])=>`<option value="${e}"${i.includes(e)?" selected":""}>${game.i18n.localize(t)}</option>`))}</select>`}return""})),CONFIG.fxmaster||(CONFIG.fxmaster={}),foundry.utils.mergeObject(CONFIG.fxmaster,{filters:o.filters,specials:o.specials,weather:o.weatherEffects}),Object.defineProperty(CONFIG.fxmaster.weather,"nature",{get:()=>(t.warn("'CONFIG.fxmaster.weather.nature' is deprecated and will be removed in a future version. Please use 'CONFIG.fxmaster.weather.leaves' instead."),CONFIG.fxmaster.weather.leaves)}),foundry.utils.mergeObject(CONFIG.weatherEffects,o.weatherEffects)})),Hooks.once("ready",(()=>{migrate()})),Hooks.on("canvasInit",(()=>{game.settings.get("fxmaster","enable")&&!game.settings.get("fxmaster","disableAll")&&(parseSpecialEffects(),l.clear())})),Hooks.on("canvasReady",(async()=>{executeWhenWorldIsMigratedToLatest((async()=>{game.settings.get("fxmaster","enable")&&!game.settings.get("fxmaster","disableAll")&&await l.activate()}))})),Hooks.on("updateScene",((e,t)=>{game.settings.get("fxmaster","enable")&&!game.settings.get("fxmaster","disableAll")&&isOnTargetMigration()&&e===canvas.scene&&((hasProperty(t,"flags.fxmaster.effects")||hasProperty(t,"flags.fxmaster.-=effects"))&&canvas.fxmaster.drawWeather({soft:!0}),(hasProperty(t,"flags.fxmaster.invert")||hasProperty(t,"flags.fxmaster.-=invert"))&&canvas.fxmaster.updateMask(),(hasProperty(t,"flags.fxmaster.filters")||hasProperty(t,"flags.fxmaster.-=filters")||hasProperty(t,"flags.fxmaster.filteredLayers")||hasProperty(t,"flags.fxmaster.-=filteredLayers"))&&l.update())})),Hooks.on("dropCanvasData",(async(e,t)=>{if(!(e.activeLayer instanceof SpecialsLayer&&e.scene))return;if("SpecialEffect"!==t.type)return;await new Promise((e=>{const s=document.createElement("video");s.addEventListener("loadedmetadata",(()=>{t.width=s.videoWidth*t.scale.x,t.height=s.videoHeight*t.scale.y,e()}),!1),s.src=t.file}));const s={alpha:1,flags:{},height:t.height,hidden:!1,img:t.file,locked:!1,occlusion:{mode:1,alpha:0},overHead:!1,rotation:0,tileSize:100,video:{loop:!0,autoplay:!0,volume:0},width:t.width,x:t.x-t.anchor.x*t.width,y:t.y-t.anchor.y*t.height,z:100};ui.notifications.info(`A new Tile was created for effect ${t.label}`),e.scene.createEmbeddedDocuments("Tile",[s]).then((()=>{}))})),Hooks.on("hotbarDrop",((e,t)=>{if("SpecialEffect"!==t.type)return;const s=SpecialsLayer._createMacro(t);t.type="Macro",t.data={command:s,name:t.label,type:"script",author:game.user.id}})),Hooks.on("updateDrawing",(e=>{e.parent===canvas.scene&&canvas.fxmaster.updateMask()})),Hooks.on("createDrawing",(e=>{e.parent===canvas.scene&&canvas.fxmaster.updateMask()})),Hooks.on("deleteDrawing",(e=>{e.parent===canvas.scene&&canvas.fxmaster.updateMask()})),Hooks.on("updateSetting",(e=>{"fxmaster.specialEffects"===e.data.key&&parseSpecialEffects()})),Hooks.on("renderDrawingHUD",((e,t,s)=>{const a=document.createElement("div");a.classList.add("control-icon"),s?.flags?.fxmaster?.masking&&a.classList.add("active"),a.setAttribute("title",game.i18n.localize("FXMASTER.MaskWeather")),a.dataset.action="mask",a.innerHTML="<i class='fas fa-cloud'></i>",t.find(".col.left").append(a),t.find(".control-icon[data-action='mask']").click((async()=>{await e.object.document.setFlag("fxmaster","masking",!s?.flags?.fxmaster?.masking),e.render(!0)}))})),function registerGetSceneControlButtonsHook(){Hooks.on("getSceneControlButtons",getSceneControlButtons)}();
//# sourceMappingURL=fxmaster.js.map
